package org.iets3.graphicalLustre.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionExecutableBase;
import java.util.Map;
import java.util.HashMap;
import com.mbeddr.mpsutil.filepicker.behavior.AbstractPicker__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.io.File;
import java.io.FileWriter;
import java.io.BufferedWriter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.nio.file.Files;
import com.mathworks.engine.MatlabEngine;
import javax.swing.JOptionPane;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class SimulinkModelGenerator_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public SimulinkModelGenerator_Intention() {
    super(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, "org.iets3.graphicalLustre.structure.ModelHolder"), IntentionType.NORMAL, false, new SNodePointer("r:dd170bea-bb48-472d-839e-c838bddb8943(org.iets3.graphicalLustre.intentions)", "3937284641398908878"));
  }
  @Override
  public String getPresentation() {
    return "SimulinkModelGenerator";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new SimulinkModelGenerator_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Generate Simulink Model";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      try {

        Map<String, Integer> variableMap = new HashMap<String, Integer>();



        String inputFilePath = AbstractPicker__BehaviorDescriptor.getCanonicalPath_id5lKnBeAuKov.invoke(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x3b5bfd85d286c8e9L, "tmpFilePath"))) + "/" + "GxwModel.m";
        String variableName = "";

        File inputFile = new File(inputFilePath);
        if (inputFile.exists()) {
          inputFile.delete();
        }
        FileWriter fileWriter = new FileWriter(inputFile.getAbsoluteFile());
        BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);

        System.out.println("##############################   the paths are " + AbstractPicker__BehaviorDescriptor.getCanonicalPath_id5lKnBeAuKov.invoke(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x3b5bfd85d286c8e9L, "tmpFilePath"))));
        bufferedWriter.write(" addpath '" + AbstractPicker__BehaviorDescriptor.getCanonicalPath_id5lKnBeAuKov.invoke(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x3b5bfd85d286c8e9L, "tmpFilePath"))) + "'; \n");
        bufferedWriter.write(" cd '" + AbstractPicker__BehaviorDescriptor.getCanonicalPath_id5lKnBeAuKov.invoke(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x3b5bfd85d286c8e9L, "tmpFilePath"))) + "'; \n");
        bufferedWriter.write(" sys = 'simulinkModel'; \n");
        bufferedWriter.write("  new_system(sys); \n");
        bufferedWriter.write(" def = legacy_code('initialize');\n");

        for (SNode item : ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d4268d7L, "listOfActors")))) {
          if (SNodeOperations.isInstanceOf(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5e94280dffc5689cL, "org.iets3.graphicalLustre.structure.GlobalInputActor"))) {
            variableName = SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
            bufferedWriter.write(" add_block('simulink/Commonly Used Blocks/Constant',[sys ");
            bufferedWriter.write("'/" + variableName + "'" + " ]); \n");
            bufferedWriter.write("set_param('simulinkModel/" + variableName + "', 'OutDataTypeStr', 'boolean');\n");


          }

          if (SNodeOperations.isInstanceOf(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5e94280dffc5689dL, "org.iets3.graphicalLustre.structure.GlobalOutputActor"))) {
            variableName = SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
            bufferedWriter.write(" add_block('simulink/Commonly Used Blocks/Out1',[sys ");
            bufferedWriter.write("'/" + variableName + "'" + " ]); \n");


          }
          if (SNodeOperations.isInstanceOf(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45dL, "org.iets3.graphicalLustre.structure.ResActor")) && SPropertyOperations.getString(SLinkOperations.getTarget(item, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45cL, 0x87370915ed531d6L, "gateDefinition")), MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, 0x5f4fbd258ee84d22L, "definition")).contains("Res1")) {
            variableName = SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
            bufferedWriter.write(" add_block('simulink/User-Defined Functions/Level-2 MATLAB S-Function',[sys ");
            bufferedWriter.write("'/" + variableName + "'" + " ]); \n");
            bufferedWriter.write("set_param('simulinkModel/" + variableName + "', 'FunctionName', 'res1_block_gxw');\n");

          }

          if (SNodeOperations.isInstanceOf(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45dL, "org.iets3.graphicalLustre.structure.ResActor")) && SPropertyOperations.getString(SLinkOperations.getTarget(item, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45cL, 0x87370915ed531d6L, "gateDefinition")), MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, 0x5f4fbd258ee84d22L, "definition")).contains("Res2")) {
            variableName = SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
            bufferedWriter.write(" add_block('simulink/User-Defined Functions/Level-2 MATLAB S-Function',[sys ");
            bufferedWriter.write("'/" + variableName + "'" + " ]); \n");
            bufferedWriter.write("set_param('simulinkModel/" + variableName + "', 'FunctionName', 'res2_block_gxw');\n");

          }

          if (SNodeOperations.isInstanceOf(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45dL, "org.iets3.graphicalLustre.structure.ResActor")) && SPropertyOperations.getString(SLinkOperations.getTarget(item, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef45c45cL, 0x87370915ed531d6L, "gateDefinition")), MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5f4fbd258ee84d21L, 0x5f4fbd258ee84d22L, "definition")).contains("Res3")) {
            variableName = SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
            bufferedWriter.write(" add_block('simulink/User-Defined Functions/Level-2 MATLAB S-Function',[sys ");
            bufferedWriter.write("'/" + variableName + "'" + " ]); \n");
            bufferedWriter.write("set_param('simulinkModel/" + variableName + "', 'FunctionName', 'res3_block_gxw');\n");

          }


          if (SNodeOperations.isInstanceOf(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef496610L, "org.iets3.graphicalLustre.structure.IfTBActor"))) {
            variableName = SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
            bufferedWriter.write(" add_block('simulink/User-Defined Functions/Level-2 MATLAB S-Function',[sys ");
            bufferedWriter.write("'/" + variableName + "'" + " ]); \n");
            bufferedWriter.write("set_param('simulinkModel/" + variableName + "', 'FunctionName', 'iftb_block_gxw');\n");



          }


          if (SNodeOperations.isInstanceOf(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x7a01286a4f8682cfL, "org.iets3.graphicalLustre.structure.ReleaseActor"))) {
            System.out.println("### now adding release actor!!");
            variableName = SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
            bufferedWriter.write(" add_block('simulink/Logic and Bit Operations/Logical Operator',[sys ");
            bufferedWriter.write("'/" + variableName + "'" + " ]); \n");
            bufferedWriter.write("set_param('simulinkModel/" + variableName + "', 'Operator', 'Or');\n");
            bufferedWriter.write("set_param('simulinkModel/" + variableName + "', 'Inputs', '" + Integer.toString(SPropertyOperations.getInteger(SNodeOperations.cast(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x7a01286a4f8682cfL, "org.iets3.graphicalLustre.structure.ReleaseActor")), MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x7a01286a4f8682cfL, 0x4b2c7d05d5e8b001L, "inputPort"))) + "');\n");

          }

          if (SNodeOperations.isInstanceOf(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x4b2c7d05d5d7e5e4L, "org.iets3.graphicalLustre.structure.NotActor"))) {
            System.out.println("### now adding release actor!!");
            variableName = SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
            bufferedWriter.write(" add_block('simulink/Logic and Bit Operations/Logical Operator',[sys ");
            bufferedWriter.write("'/" + variableName + "'" + " ]); \n");
            bufferedWriter.write("set_param('simulinkModel/" + variableName + "', 'Operator', 'Not');\n");

          }


          if (SNodeOperations.isInstanceOf(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x17ee0fce5b59ab5dL, "org.iets3.graphicalLustre.structure.IffActor"))) {
            variableName = SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
            bufferedWriter.write(" add_block('simulink/User-Defined Functions/Level-2 MATLAB S-Function',[sys ");
            bufferedWriter.write("'/" + variableName + "'" + " ]); \n");
            bufferedWriter.write("set_param('simulinkModel/" + variableName + "', 'FunctionName', 'iff_block_gxw');\n");



          }




          if (SNodeOperations.isInstanceOf(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0766L, "org.iets3.graphicalLustre.structure.TrUBActor"))) {
            variableName = SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
            bufferedWriter.write(" add_block('simulink/User-Defined Functions/Level-2 MATLAB S-Function',[sys ");
            bufferedWriter.write("'/" + variableName + "'" + " ]); \n");
            bufferedWriter.write("set_param('simulinkModel/" + variableName + "', 'FunctionName', 'trub_block_gxw');\n");


          }

          if (SNodeOperations.isInstanceOf(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x7459d2b66d70de33L, "org.iets3.graphicalLustre.structure.EventActor"))) {
            variableName = SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
            bufferedWriter.write(" add_block('simulink/Logic and Bit Operations/Logical Operator',[sys ");
            bufferedWriter.write("'/" + variableName + "'" + " ]); \n");
            bufferedWriter.write("set_param('simulinkModel/" + variableName + "', 'Operator', 'And');\n");
            bufferedWriter.write("set_param('simulinkModel/" + variableName + "', 'Inputs', '" + Integer.toString(SPropertyOperations.getInteger(SNodeOperations.cast(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x7459d2b66d70de33L, "org.iets3.graphicalLustre.structure.EventActor")), MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x7459d2b66d70de33L, 0x4b2c7d05d5d7558aL, "inptPort"))) + "');\n");



          }

          if (SNodeOperations.isInstanceOf(item, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0717L, "org.iets3.graphicalLustre.structure.TernaryNotActor"))) {
            variableName = SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
            bufferedWriter.write(" add_block('simulink/User-Defined Functions/Level-2 MATLAB S-Function',[sys ");
            bufferedWriter.write("'/" + variableName + "'" + " ]); \n");
            bufferedWriter.write("set_param('simulinkModel/" + variableName + "', 'FunctionName', 'ternarynot_block_gxw');\n");


          }



        }

        for (SNode wire : ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d538b7bL, "listofWires")))) {

          if (SPropertyOperations.getString(wire, MetaAdapterFactory.getProperty(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x13859febca01872bL, "sourcePort")).contains(".dc") || SPropertyOperations.getString(SLinkOperations.getTarget(wire, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec5bL, "sourceActor")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).equals(SPropertyOperations.getString(SLinkOperations.getTarget(wire, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec64L, "destinationActor")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
            continue;
          }

          if (!(variableMap.containsKey(SPropertyOperations.getString(SLinkOperations.getTarget(wire, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec64L, "destinationActor")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"))))) {
            bufferedWriter.write("add_line(sys,'" + SPropertyOperations.getString(SLinkOperations.getTarget(wire, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec5bL, "sourceActor")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "/1', '" + SPropertyOperations.getString(SLinkOperations.getTarget(wire, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec64L, "destinationActor")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "/1', 'autorouting','on'" + " );\n");
            variableMap.put(SPropertyOperations.getString(SLinkOperations.getTarget(wire, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec64L, "destinationActor")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), 1);
          } else {
            Integer portCount = variableMap.get(SPropertyOperations.getString(SLinkOperations.getTarget(wire, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec64L, "destinationActor")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
            portCount++;
            variableMap.put(SPropertyOperations.getString(SLinkOperations.getTarget(wire, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec64L, "destinationActor")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), portCount);
            bufferedWriter.write("add_line(sys,'" + SPropertyOperations.getString(SLinkOperations.getTarget(wire, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec5bL, "sourceActor")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "/1', '" + SPropertyOperations.getString(SLinkOperations.getTarget(wire, MetaAdapterFactory.getReferenceLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5ab29dafef4a0767L, 0x1e79d4940d54ec64L, "destinationActor")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "/" + portCount + "', 'autorouting','on'" + " );\n");

          }
        }


        bufferedWriter.write("cset = getConfigSet('simulinkModel', 'Configuration'); \n ");
        bufferedWriter.write("set_param (cset, 'StopTime', '0'); \n");
        bufferedWriter.write("set_param (cset, 'StartTime', '0'); \n ");
        bufferedWriter.write("save_system(sys)\n");


        bufferedWriter.write("  ");

        bufferedWriter.close();


        // running MATLAB by command 

        // start by deleting the previous simulink model 
        try {
          File file = new File(AbstractPicker__BehaviorDescriptor.getCanonicalPath_id5lKnBeAuKov.invoke(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x3b5bfd85d286c8e9L, "tmpFilePath"))) + "/simulinkModel.slx");
          Files.deleteIfExists(file.toPath());
        } catch (Exception ex) {
          ex.printStackTrace();
        }

        String[] options = {"-noFigureWindows", "-r", "-cd"};
        MatlabEngine startMatlab = MatlabEngine.startMatlab(options);
        startMatlab.evalAsync("GxwModel");

        File f = new File(AbstractPicker__BehaviorDescriptor.getCanonicalPath_id5lKnBeAuKov.invoke(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x3b5bfd85d286c8e9L, "tmpFilePath"))) + "/simulinkModel.slx");
        boolean computationFinished = false;

        while (!(computationFinished)) {
          if (f.exists()) {
            computationFinished = true;
            JOptionPane.showMessageDialog(null, "The model generation is complete!");
          }
        }

        startMatlab.disconnect();

      } catch (Exception ex) {
        System.out.println("the exception is " + ex);

      }
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return SimulinkModelGenerator_Intention.this;
    }
  }
}
