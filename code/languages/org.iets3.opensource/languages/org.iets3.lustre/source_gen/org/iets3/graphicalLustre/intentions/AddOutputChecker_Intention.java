package org.iets3.graphicalLustre.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionDescriptorBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Collection;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.intentions.IntentionType;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Collections;
import jetbrains.mps.intentions.IntentionExecutableBase;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.mbeddr.mpsutil.filepicker.behavior.AbstractPicker__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import java.util.List;
import java.util.Comparator;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.intentions.IntentionDescriptor;

public final class AddOutputChecker_Intention extends IntentionDescriptorBase implements IntentionFactory {
  private Collection<IntentionExecutable> myCachedExecutable;
  public AddOutputChecker_Intention() {
    super(MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, "org.iets3.graphicalLustre.structure.ModelHolder"), IntentionType.NORMAL, false, new SNodePointer("r:dd170bea-bb48-472d-839e-c838bddb8943(org.iets3.graphicalLustre.intentions)", "8801306133368619891"));
  }
  @Override
  public String getPresentation() {
    return "AddOutputChecker";
  }
  @Override
  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    return true;
  }
  @Override
  public boolean isSurroundWith() {
    return false;
  }
  public Collection<IntentionExecutable> instances(final SNode node, final EditorContext context) {
    if (myCachedExecutable == null) {
      myCachedExecutable = Collections.<IntentionExecutable>singletonList(new AddOutputChecker_Intention.IntentionImplementation());
    }
    return myCachedExecutable;
  }
  /*package*/ final class IntentionImplementation extends IntentionExecutableBase {
    public IntentionImplementation() {
    }
    @Override
    public String getDescription(final SNode node, final EditorContext editorContext) {
      return "Add Simulation / Test Case Generation Panel";
    }
    @Override
    public void execute(final SNode node, final EditorContext editorContext) {
      final SNode outputChecker = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, "org.iets3.simulationOutputChecker.structure.SimulinkResultDisplayer"));
      SPropertyOperations.set(outputChecker, MetaAdapterFactory.getProperty(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x22b33c261aecf1d1L, "filePath"), AbstractPicker__BehaviorDescriptor.getCanonicalPath_id5lKnBeAuKov.invoke(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x3b5bfd85d286c8e9L, "tmpFilePath"))));
      SNode simulinkResult = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3cL, "org.iets3.simulink.resultmodel.structure.SimulinkResult"));
      SPropertyOperations.set(simulinkResult, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "Simulink Result");

      SLinkOperations.setTarget(outputChecker, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x60b8dfab159e013L, "simulinkResult"), simulinkResult);

      ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x1e79d4940d4268d4L, 0x1e79d4940d4268d7L, "listOfActors"))).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          if (SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0x33eb1b5bad964262L, 0x9112684c487e01e0L, 0x5e94280dffc5689cL, "org.iets3.graphicalLustre.structure.GlobalInputActor"))) {
            SNode nodeInputCell = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e40L, "org.iets3.simulink.resultmodel.structure.InputCell")), null);
            SPropertyOperations.set(nodeInputCell, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
            SPropertyOperations.set(nodeInputCell, MetaAdapterFactory.getProperty(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e40L, 0x57a186429f923e73L, "inputValue"), "0");
            ListSequence.fromList(SLinkOperations.getChildren(outputChecker, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x60b8dfab159e014L, "inputCells"))).addElement(nodeInputCell);
          }
        }
      });

      List<SNode> inputCells = SLinkOperations.getChildren(outputChecker, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x60b8dfab159e014L, "inputCells"));
      Iterable<SNode> seq = ListSequence.fromList(inputCells).sort(new Comparator<SNode>() {
        public int compare(SNode a, SNode b) {
          return SPropertyOperations.getString(a, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).compareToIgnoreCase(SPropertyOperations.getString(b, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
        }
      }, true);
      ListSequence.fromList(SLinkOperations.getChildren(outputChecker, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x60b8dfab159e014L, "inputCells"))).clear();
      ListSequence.fromList(SLinkOperations.getChildren(outputChecker, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x60b8dfab159e014L, "inputCells"))).addSequence(Sequence.fromIterable(seq));

      SModelOperations.addRootNode(SNodeOperations.getModel(node), outputChecker);
    }
    @Override
    public IntentionDescriptor getDescriptor() {
      return AddOutputChecker_Intention.this;
    }
  }
}
