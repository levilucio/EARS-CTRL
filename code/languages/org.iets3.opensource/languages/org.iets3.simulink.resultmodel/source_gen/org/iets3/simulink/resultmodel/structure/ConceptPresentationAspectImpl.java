package org.iets3.simulink.resultmodel.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Input = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InputCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Output = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Result = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Sequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimulinkResult = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_Input;
      case 1:
        return props_InputCell;
      case 2:
        return props_Output;
      case 3:
        return props_OutputCell;
      case 4:
        return props_RefHolder;
      case 5:
        return props_RefList;
      case 6:
        return props_Result;
      case 7:
        return props_Sequence;
      case 8:
        return props_SimulinkResult;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
