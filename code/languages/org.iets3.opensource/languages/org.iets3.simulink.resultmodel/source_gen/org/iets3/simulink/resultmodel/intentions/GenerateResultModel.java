package org.iets3.simulink.resultmodel.intentions;

/*Generated by MPS */

import jetbrains.mps.editor.intentions.IntentionsFactory;
import jetbrains.mps.editor.intentions.NodeTransformer;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.StringTokenizer;
import java.io.IOException;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.editor.intentions.BaseNodeTransformer;

public class GenerateResultModel extends IntentionsFactory {
  public GenerateResultModel() {
  }

  public String getId() {
    return getClass().getName();
  }

  public boolean isAvailableInChildren() {
    return true;
  }

  public boolean isSurroundWith() {
    return false;
  }

  public NodeTransformer.Kind getKind() {
    return NodeTransformer.Kind.INTENTION;
  }


  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3cL, "org.iets3.simulink.resultmodel.structure.SimulinkResult");
  }

  public SNodePointer getDeclarationNode() {
    return implementationNode;
  }

  private SNodePointer implementationNode = new SNodePointer("r:7d42abc9-1d49-48bb-b7a8-cbebdd46866a(org.iets3.simulink.resultmodel.intentions)", "6314475773253313161");


  private boolean isApplicableHelper(SNode node, EditorContext editorContext) {
    return true;
  }


  public boolean isAvailableInChild(SNode node, SNode node1, EditorContext context) {
    return true;
  }

  public boolean isApplicable(SNode node, EditorContext editorContext) {
    return isApplicableHelper(node, editorContext);
  }


  protected static Logger LOG = LogManager.getLogger(GenerateResultModel.class);
  public void execute(SNode node, EditorContext editorContext) {

    List<String> input = new ArrayList<String>();
    List<String> output = new ArrayList<String>();
    List<String> sequence = new ArrayList<String>();
    String dataType = "";
    try {
      String line;
      InputStream fis = new FileInputStream("simulation_output.txt");
      InputStreamReader isr = new InputStreamReader(fis);
      BufferedReader br = new BufferedReader(isr);

      SNode simulinkResult = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3cL, "org.iets3.simulink.resultmodel.structure.SimulinkResult"));
      SPropertyOperations.set(simulinkResult, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "Simulink_Result");
      SModelOperations.addRootNode(SNodeOperations.getModel(node), simulinkResult);
      while ((line = br.readLine()) != null) {

        if (line.trim().equalsIgnoreCase("INPUT:")) {
          dataType = "INPUT";
          continue;
        }

        if (line.trim().equalsIgnoreCase("OUTPUT:")) {
          dataType = "OUTPUT";
          continue;

        }
        if (line.trim().equalsIgnoreCase("START SEQUENCE")) {
          SNode sequenceNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f92b8d3L, "org.iets3.simulink.resultmodel.structure.Sequence"));
          ListSequence.fromList(SLinkOperations.getChildren(simulinkResult, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3cL, 0x57a186429f923e44L, "sequence"))).addElement(sequenceNode);
          String dataReadLine;
          while ((dataReadLine = br.readLine()) != null) {
            boolean isEndOfSequence = dataReadLine.trim().equalsIgnoreCase("END SEQUENCE");
            if (isEndOfSequence) {
              break;
            }
            SNode result = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3dL, "org.iets3.simulink.resultmodel.structure.Result"));
            ListSequence.fromList(SLinkOperations.getChildren(sequenceNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f92b8d3L, 0x57a186429f92b8d6L, "results"))).addElement(result);
            if (dataReadLine.trim().equalsIgnoreCase("The inputs are:")) {
              String inputString = br.readLine().trim();
              SNode inputReadNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3eL, "org.iets3.simulink.resultmodel.structure.Input"));
              StringTokenizer tokenizer = new StringTokenizer(inputString.trim(), " ");
              while (tokenizer.hasMoreTokens()) {
                SNode inputCell = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e40L, "org.iets3.simulink.resultmodel.structure.InputCell"));
                String nextElement = (String) tokenizer.nextElement();
                SPropertyOperations.set(inputCell, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), ListSequence.fromList(input).getElement(SLinkOperations.getChildren(inputReadNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3eL, 0x57a186429f923e71L, "inputCell")).size()));
                SPropertyOperations.set(inputCell, MetaAdapterFactory.getProperty(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e40L, 0x57a186429f923e73L, "inputValue"), nextElement);
                ListSequence.fromList(SLinkOperations.getChildren(inputReadNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3eL, 0x57a186429f923e71L, "inputCell"))).addElement(inputCell);
              }
              SLinkOperations.setTarget(ListSequence.fromList(SLinkOperations.getChildren(sequenceNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f92b8d3L, 0x57a186429f92b8d6L, "results"))).last(), MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3dL, 0x57a186429f923e6aL, "input"), inputReadNode);
            }
            dataReadLine = br.readLine();
            if (dataReadLine.trim().equalsIgnoreCase("The outputs are:")) {
              String outputString = br.readLine().trim();
              SNode outputReadNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3fL, "org.iets3.simulink.resultmodel.structure.Output"));
              StringTokenizer tokenizer = new StringTokenizer(outputString.trim(), " ");
              int nameCounter = 0;
              while (tokenizer.hasMoreTokens()) {
                SNode outCell = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e41L, "org.iets3.simulink.resultmodel.structure.OutputCell"));
                SPropertyOperations.set(outCell, MetaAdapterFactory.getProperty(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e41L, 0x57a186429f923e77L, "outputValue"), ((String) tokenizer.nextElement()));
                SPropertyOperations.set(outCell, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), ListSequence.fromList(output).getElement(SLinkOperations.getChildren(outputReadNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3fL, 0x57a186429f923e75L, "outputCell")).size()));
                ListSequence.fromList(SLinkOperations.getChildren(outputReadNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3fL, 0x57a186429f923e75L, "outputCell"))).addElement(outCell);
              }
              SLinkOperations.setTarget(ListSequence.fromList(SLinkOperations.getChildren(sequenceNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f92b8d3L, 0x57a186429f92b8d6L, "results"))).last(), MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3dL, 0x57a186429f923e6cL, "output"), outputReadNode);
            }
          }
          dataType = "seqStart";
          continue;
        }

        if (dataType.equals("INPUT") && !(line.trim().equalsIgnoreCase("END INPUT:"))) {
          ListSequence.fromList(input).addElement(line);
          continue;

        }
        if (dataType.equals("OUTPUT") && !(line.trim().equalsIgnoreCase("END OUTPUT:"))) {
          ListSequence.fromList(output).addElement(line);
          continue;
        }
      }
      br.close();
    } catch (IOException e) {
      if (LOG.isInfoEnabled()) {
        LOG.info("the exception is ", e);
      }
    }

  }
  public String description(SNode node, EditorContext editorContext) {
    return "Product Simulink Result Model";
  }

  public Collection<NodeTransformer> getTreeTransformers(SNode node, SNode child, EditorContext editorContext) {
    Collection<NodeTransformer> result = CollectionSequence.fromCollection(new ArrayList<NodeTransformer>());
    CollectionSequence.fromCollection(result).addElement(new BaseNodeTransformer(this, node, editorContext, GenerateResultModel.this.getKind(), implementationNode) {
      protected void execute(SNode node, EditorContext editorContext) {
        GenerateResultModel.this.execute(node, editorContext);
      }
      protected String getDescription(SNode node, EditorContext editorContext) {
        return GenerateResultModel.this.description(node, editorContext);
      }
    });
    return result;
  }
}
