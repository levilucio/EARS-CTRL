package org.iets3.simulink.resultmodel.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = ((SAbstractConcept) concept);
      Integer preIndex = indices_xbvbvu_a0a.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Input_Editor());
          }
          break;
        case 1:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new InputCell_Editor());
          }
          break;
        case 2:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Output_Editor());
          }
          break;
        case 3:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new OutputCell_Editor());
          }
          break;
        case 4:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Result_Editor());
          }
          break;
        case 5:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new Sequence_Editor());
          }
          break;
        case 6:
          if (true) {
            return Collections.<ConceptEditor>singletonList(new SimulinkResult_Editor());
          }
          break;
        default:
      }
    }
    return Collections.<ConceptEditor>emptyList();
  }



  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0a = buildConceptIndices(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3eL, "org.iets3.simulink.resultmodel.structure.Input"), MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e40L, "org.iets3.simulink.resultmodel.structure.InputCell"), MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3fL, "org.iets3.simulink.resultmodel.structure.Output"), MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e41L, "org.iets3.simulink.resultmodel.structure.OutputCell"), MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3dL, "org.iets3.simulink.resultmodel.structure.Result"), MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f92b8d3L, "org.iets3.simulink.resultmodel.structure.Sequence"), MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3cL, "org.iets3.simulink.resultmodel.structure.SimulinkResult"));
}
