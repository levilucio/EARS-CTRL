package org.iets3.core.base.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ICanReadPersistentResult = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICanRunCheckManually = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICanStoreCheckResult = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICanStorePersistentResult = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IContainsStuffToRunManually = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICustomRemoteCreateSupport = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IDetectNeedToRunManually = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IETS3DummyIcon16 = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0h).create();
  private final ConceptPresentation props_IETS3DummyIcon24 = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0i).create();
  private final ConceptPresentation props_IETS3DummyIcon32 = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0j).create();
  private final ConceptPresentation props_IOptionallyNamed = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISpecRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IValidNamedConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OptionalNameSpecifier = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_ICanReadPersistentResult;
      case 1:
        return props_ICanRunCheckManually;
      case 2:
        return props_ICanStoreCheckResult;
      case 3:
        return props_ICanStorePersistentResult;
      case 4:
        return props_IContainsStuffToRunManually;
      case 5:
        return props_ICustomRemoteCreateSupport;
      case 6:
        return props_IDetectNeedToRunManually;
      case 7:
        return props_IETS3DummyIcon16;
      case 8:
        return props_IETS3DummyIcon24;
      case 9:
        return props_IETS3DummyIcon32;
      case 10:
        return props_IOptionallyNamed;
      case 11:
        return props_ISpecRoot;
      case 12:
        return props_IValidNamedConcept;
      case 13:
        return props_OptionalNameSpecifier;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
