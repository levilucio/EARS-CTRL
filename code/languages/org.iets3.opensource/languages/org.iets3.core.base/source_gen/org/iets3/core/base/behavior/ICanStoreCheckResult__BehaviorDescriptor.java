package org.iets3.core.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class ICanStoreCheckResult__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x3dc39ae7decbd830L, "org.iets3.core.base.structure.ICanStoreCheckResult");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<String> userObjectKey_id3R3AIvum$_6 = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("userObjectKey").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3R3AIvum$_6").registry(REGISTRY).build();
  public static final SMethod<Void> storeLastResult_id3R3AIvuq5Dp = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("storeLastResult").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3R3AIvuq5Dp").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(IResult.class, ""));
  public static final SMethod<Boolean> hasExistingResult_id3R3AIvumwpO = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasExistingResult").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3R3AIvumwpO").registry(REGISTRY).build();
  public static final SMethod<Boolean> hasCounterExample_idhXRDtv5Cyz = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasCounterExample").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("hXRDtv5Cyz").registry(REGISTRY).build();
  public static final SMethod<IResult> getLastResult_id3R3AIvumwq7 = new SMethodBuilder<IResult>(new SJavaCompoundTypeImpl(IResult.class)).name("getLastResult").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3R3AIvumwq7").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(userObjectKey_id3R3AIvum$_6, storeLastResult_id3R3AIvuq5Dp, hasExistingResult_id3R3AIvumwpO, hasCounterExample_idhXRDtv5Cyz, getLastResult_id3R3AIvumwq7);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String userObjectKey_id3R3AIvum$_6(@NotNull SNode __thisNode__) {
    return "ICanRunCheckManually.lastResult";
  }
  /*package*/ static void storeLastResult_id3R3AIvuq5Dp(@NotNull SNode __thisNode__, IResult result) {
    __thisNode__.putUserObject(ICanStoreCheckResult__BehaviorDescriptor.userObjectKey_id3R3AIvum$_6.invoke(__thisNode__), result);
    if (result instanceof IPersistentResult && SNodeOperations.isInstanceOf(__thisNode__, MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x2b59559d694dcd4cL, "org.iets3.core.base.structure.ICanStorePersistentResult"))) {
      ((IPersistentResult) result).writeToFile();
    }
  }
  /*package*/ static boolean hasExistingResult_id3R3AIvumwpO(@NotNull SNode __thisNode__) {
    boolean hasResult = __thisNode__.getUserObject(ICanStoreCheckResult__BehaviorDescriptor.userObjectKey_id3R3AIvum$_6.invoke(__thisNode__)) != null;
    if (hasResult) {
      return true;
    }
    if (!(SNodeOperations.isInstanceOf(__thisNode__, MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x3b86953aeeff3565L, "org.iets3.core.base.structure.ICanReadPersistentResult")))) {
      return false;
    }
    return (boolean) ICanReadPersistentResult__BehaviorDescriptor.hasPersistentResult_id3UrItPobuSV.invoke(SNodeOperations.cast(__thisNode__, MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x3b86953aeeff3565L, "org.iets3.core.base.structure.ICanReadPersistentResult")));
  }
  /*package*/ static boolean hasCounterExample_idhXRDtv5Cyz(@NotNull SNode __thisNode__) {
    return ICanStoreCheckResult__BehaviorDescriptor.getLastResult_id3R3AIvumwq7.invoke(__thisNode__) != null && !(ICanStoreCheckResult__BehaviorDescriptor.getLastResult_id3R3AIvumwq7.invoke(__thisNode__).isOk());
  }
  /*package*/ static IResult getLastResult_id3R3AIvumwq7(@NotNull SNode __thisNode__) {
    try {
      IResult result = (IResult) __thisNode__.getUserObject(ICanStoreCheckResult__BehaviorDescriptor.userObjectKey_id3R3AIvum$_6.invoke(__thisNode__));
      if (result != null) {
        return result;
      }
      if (!(SNodeOperations.isInstanceOf(__thisNode__, MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x3b86953aeeff3565L, "org.iets3.core.base.structure.ICanReadPersistentResult")))) {
        return null;
      }
      return ICanReadPersistentResult__BehaviorDescriptor.getPersistentResult_id3UrItPobvnj.invoke(SNodeOperations.cast(__thisNode__, MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x3b86953aeeff3565L, "org.iets3.core.base.structure.ICanReadPersistentResult")));
    } catch (ClassCastException cex) {
      // happens after classes are reloaded 
      System.out.println(cex);
      ICanStoreCheckResult__BehaviorDescriptor.storeLastResult_id3R3AIvuq5Dp.invoke(__thisNode__, null);
      return null;
    }
  }

  /*package*/ ICanStoreCheckResult__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) userObjectKey_id3R3AIvum$_6(node));
      case 1:
        storeLastResult_id3R3AIvuq5Dp(node, (IResult) parameters[0]);
        return null;
      case 2:
        return (T) ((Boolean) hasExistingResult_id3R3AIvumwpO(node));
      case 3:
        return (T) ((Boolean) hasCounterExample_idhXRDtv5Cyz(node));
      case 4:
        return (T) ((IResult) getLastResult_id3R3AIvumwq7(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
