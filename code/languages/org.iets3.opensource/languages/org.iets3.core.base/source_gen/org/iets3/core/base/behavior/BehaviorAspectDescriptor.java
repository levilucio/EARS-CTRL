package org.iets3.core.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myIOptionallyNamed__BehaviorDescriptor = new IOptionallyNamed__BehaviorDescriptor();
  private final BHDescriptor myOptionalNameSpecifier__BehaviorDescriptor = new OptionalNameSpecifier__BehaviorDescriptor();
  private final BHDescriptor myIContainsStuffToRunManually__BehaviorDescriptor = new IContainsStuffToRunManually__BehaviorDescriptor();
  private final BHDescriptor myICustomRemoteCreateSupport__BehaviorDescriptor = new ICustomRemoteCreateSupport__BehaviorDescriptor();
  private final BHDescriptor myICanStorePersistentResult__BehaviorDescriptor = new ICanStorePersistentResult__BehaviorDescriptor();
  private final BHDescriptor myICanReadPersistentResult__BehaviorDescriptor = new ICanReadPersistentResult__BehaviorDescriptor();
  private final BHDescriptor myICanRunCheckManually__BehaviorDescriptor = new ICanRunCheckManually__BehaviorDescriptor();
  private final BHDescriptor myICanStoreCheckResult__BehaviorDescriptor = new ICanStoreCheckResult__BehaviorDescriptor();
  private final BHDescriptor myIDetectNeedToRunManually__BehaviorDescriptor = new IDetectNeedToRunManually__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0m.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myICanReadPersistentResult__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myICanRunCheckManually__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myICanStoreCheckResult__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myICanStorePersistentResult__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return myIContainsStuffToRunManually__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myICustomRemoteCreateSupport__BehaviorDescriptor;
          }
          break;
        case 6:
          if (true) {
            return myIDetectNeedToRunManually__BehaviorDescriptor;
          }
          break;
        case 7:
          if (true) {
            return myIOptionallyNamed__BehaviorDescriptor;
          }
          break;
        case 8:
          if (true) {
            return myOptionalNameSpecifier__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0m = buildConceptIndices(MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x3b86953aeeff3565L, "org.iets3.core.base.structure.ICanReadPersistentResult"), MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x3dc39ae7de59be3aL, "org.iets3.core.base.structure.ICanRunCheckManually"), MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x3dc39ae7decbd830L, "org.iets3.core.base.structure.ICanStoreCheckResult"), MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x2b59559d694dcd4cL, "org.iets3.core.base.structure.ICanStorePersistentResult"), MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0xe5ee756dfdd8a45L, "org.iets3.core.base.structure.IContainsStuffToRunManually"), MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x1fb563bdc7aca84fL, "org.iets3.core.base.structure.ICustomRemoteCreateSupport"), MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x6caf8a4d6c71bb55L, "org.iets3.core.base.structure.IDetectNeedToRunManually"), MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x32f64a31a100207L, "org.iets3.core.base.structure.IOptionallyNamed"), MetaAdapterFactory.getConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x32f64a31a10020aL, "org.iets3.core.base.structure.OptionalNameSpecifier"));
}
