package org.iets3.core.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import de.slisson.mps.hacks.editor.EditorComponentHacks;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class ICanRunCheckManually__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0x7b68d745a7b848b9L, 0xbd9c05c0f8725a35L, 0x3dc39ae7de59be3aL, "org.iets3.core.base.structure.ICanRunCheckManually");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Boolean> readyToRunManually_id3R3AIvumwpv = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("readyToRunManually").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3R3AIvumwpv").registry(REGISTRY).build();
  public static final SMethod<Boolean> hasChangedAndMustBeRechecked_id6MJy$PGsBKB = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("hasChangedAndMustBeRechecked").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6MJy$PGsBKB").registry(REGISTRY).build();
  public static final SMethod<Boolean> canDetectChange_id6MJy$PGsBY8 = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("canDetectChange").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6MJy$PGsBY8").registry(REGISTRY).build();
  public static final SMethod<Void> runManually_id3R3AIvumrTm = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("runManually").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3R3AIvumrTm").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(EditorContext.class, ""));
  public static final SMethod<Void> runManuallyWithUIUpdate_idub9nkyQ908 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("runManuallyWithUIUpdate").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("ub9nkyQ908").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(EditorContext.class, ""));
  public static final SMethod<Boolean> highlightError_id4b4fYXfo1HZ = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("highlightError").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4b4fYXfo1HZ").registry(REGISTRY).build();
  public static final SMethod<Boolean> mustBeRunManually_id3R3AIvumAZH = new SMethodBuilder<Boolean>(new SJavaCompoundTypeImpl(Boolean.TYPE)).name("mustBeRunManually").modifiers(SModifiersImpl.create(12, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3R3AIvumAZH").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(readyToRunManually_id3R3AIvumwpv, hasChangedAndMustBeRechecked_id6MJy$PGsBKB, canDetectChange_id6MJy$PGsBY8, runManually_id3R3AIvumrTm, runManuallyWithUIUpdate_idub9nkyQ908, highlightError_id4b4fYXfo1HZ, mustBeRunManually_id3R3AIvumAZH);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static boolean readyToRunManually_id3R3AIvumwpv(@NotNull SNode __thisNode__) {
    return true;
  }
  /*package*/ static boolean hasChangedAndMustBeRechecked_id6MJy$PGsBKB(@NotNull SNode __thisNode__) {
    return true;
  }
  /*package*/ static boolean canDetectChange_id6MJy$PGsBY8(@NotNull SNode __thisNode__) {
    return false;
  }
  /*package*/ static void runManuallyWithUIUpdate_idub9nkyQ908(@NotNull SNode __thisNode__, EditorContext edCtxOrNull) {
    ICanRunCheckManually__BehaviorDescriptor.runManually_id3R3AIvumrTm.invoke(__thisNode__, edCtxOrNull);
    final SNode cr = SNodeOperations.getContainingRoot(__thisNode__);
    ListSequence.fromList(EditorComponentHacks.findAllInstances()).where(new IWhereFilter<EditorComponent>() {
      public boolean accept(EditorComponent it) {
        return it.getRootCell().getSNode() == cr;
      }
    }).visitAll(new IVisitor<EditorComponent>() {
      public void visit(EditorComponent it) {
        it.update();
      }
    });
  }
  /*package*/ static boolean highlightError_id4b4fYXfo1HZ(@NotNull SNode __thisNode__) {
    return true;
  }

  /*package*/ ICanRunCheckManually__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Boolean) readyToRunManually_id3R3AIvumwpv(node));
      case 1:
        return (T) ((Boolean) hasChangedAndMustBeRechecked_id6MJy$PGsBKB(node));
      case 2:
        return (T) ((Boolean) canDetectChange_id6MJy$PGsBY8(node));
      case 4:
        runManuallyWithUIUpdate_idub9nkyQ908(node, (EditorContext) parameters[0]);
        return null;
      case 5:
        return (T) ((Boolean) highlightError_id4b4fYXfo1HZ(node));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
