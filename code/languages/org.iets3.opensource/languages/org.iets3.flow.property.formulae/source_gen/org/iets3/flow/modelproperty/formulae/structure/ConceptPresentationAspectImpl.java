package org.iets3.flow.modelproperty.formulae.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AndPropertyFormula = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AtomicProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryPropertyFormula = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImplicationPropertyFormula = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotPropertyFormula = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrPropertyFormula = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyFormula = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnaryPropertyFormula = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AndPropertyFormula;
      case 1:
        return props_AtomicProperty;
      case 2:
        return props_BinaryPropertyFormula;
      case 3:
        return props_ImplicationPropertyFormula;
      case 4:
        return props_NotPropertyFormula;
      case 5:
        return props_OrPropertyFormula;
      case 6:
        return props_PropertyFormula;
      case 7:
        return props_UnaryPropertyFormula;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
