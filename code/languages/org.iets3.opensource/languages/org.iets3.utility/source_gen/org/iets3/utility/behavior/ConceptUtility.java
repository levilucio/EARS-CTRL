package org.iets3.utility.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Collection;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.language.SConcept;

public class ConceptUtility {

  public static SNode createNodeFromAbstractConceptDec(SNode conceptDeclaration) {
    SLanguage conceptHolderLanguage = LanguageUtility.getLanguageFromAbstractConcept(conceptDeclaration);
    for (SAbstractConcept item : Sequence.fromIterable(conceptHolderLanguage.getConcepts())) {
      if (item.getName().equals(SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
        Collection<SProperty> properties = item.getProperties();
        return SConceptOperations.createNewNode(as_3blm9u_a0a1a0a1a1(item, SConcept.class));
      }
    }
    return null;
  }
  private static <T> T as_3blm9u_a0a1a0a1a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
