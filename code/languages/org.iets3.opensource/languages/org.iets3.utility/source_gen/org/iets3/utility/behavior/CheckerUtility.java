package org.iets3.utility.behavior;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.checkers.ConstraintsChecker;
import jetbrains.mps.checkers.LanguageErrorsComponent;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.typesystemEngine.checker.TypesystemChecker;

public class CheckerUtility {
  public static Set<IErrorReporter> CheckConceptNodesForPropertyErrors(SNode aNode) {
    ConstraintsChecker cc = new ConstraintsChecker();
    LanguageErrorsComponent lec = new LanguageErrorsComponent(SNodeOperations.getModel(aNode));
    cc.checkNode(aNode, lec, MPSModuleRepository.getInstance());

    Set<IErrorReporter> errors = lec.getErrors();

    for (IErrorReporter e : SetSequence.fromSet(errors)) {
      SNode sNode = e.getSNode();
      SConcept concept = sNode.getConcept();
    }
    if (lec.getErrors().size() != 0) {
      return errors;
    }
    return null;
  }

  public static Set<IErrorReporter> CheckConceptNodesForTypeCheckingErrors(SNode aNode) {
    TypesystemChecker tc = new TypesystemChecker();
    Set<IErrorReporter> typeErrors = tc.getErrors(aNode, MPSModuleRepository.getInstance());
    for (IErrorReporter te : SetSequence.fromSet(typeErrors)) {
      SNode snode = te.getSNode();
      SConcept concept = snode.getConcept();
    }
    if (typeErrors.size() != 0) {
      return typeErrors;
    }
    return null;
  }

}
