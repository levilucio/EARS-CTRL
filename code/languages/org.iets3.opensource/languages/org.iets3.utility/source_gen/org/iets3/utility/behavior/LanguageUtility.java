package org.iets3.utility.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.smodel.language.LanguageRegistry;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.smodel.SModelInternal;

public class LanguageUtility {

  public static SLanguage getLanguageFromAbstractConcept(SNode conceptDeclaration) {


    for (SLanguage language : CollectionSequence.fromCollection(LanguageRegistry.getInstance().getAllLanguages())) {
      for (SAbstractConcept concept : Sequence.fromIterable(language.getConcepts())) {
        if (concept.getName().equals(SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
          SModel modelDescriptor = SModelRepository.getInstance().getModelDescriptor(language + ".structure");
          for (SNode atomicModel : Sequence.fromIterable(modelDescriptor.getRootNodes())) {
            if (atomicModel.getName().contains(SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {

              System.out.println("the atomic model id  is " + atomicModel.getNodeId().toString() + " and the concept declaration id is " + SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x5d2e6079771f8cc0L, "conceptId")));
              if (SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x5d2e6079771f8cc0L, "conceptId")).equals(atomicModel.getNodeId().toString())) {
                return language;
              }
            }
          }
        }
      }
    }

    System.out.println("+++++++++++++++++++++no language found for " + SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
    return null;
  }


  public static void fixDependencyForConcept(SNode conceptDeclaration, SModelInternal internal, SLanguage language) {

    try {
      if (internal.importedLanguageIds().contains(language)) {
        System.out.println("already added for concept" + SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      } else {

        internal.addLanguage(language);
        System.out.println("not added for concept" + SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + " adding now!");
        internal.addModelImport(SModelRepository.getInstance().getModelDescriptor(language + ".structure").getReference());
      }

    } catch (Exception ex) {
      System.out.println("the exception is " + ex);
    }
  }


}
