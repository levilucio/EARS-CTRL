package org.iets3.core.users.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import de.slisson.mps.tables.runtime.cells.ChildsTracker;
import de.slisson.mps.tables.runtime.gridmodel.Grid;
import jetbrains.mps.openapi.editor.style.Style;
import de.slisson.mps.tables.runtime.style.ITableStyleFactory;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.nodeEditor.cells.EditorCell_Error;
import de.slisson.mps.tables.runtime.cells.PartialTableEditor;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import de.slisson.mps.tables.runtime.gridmodel.EditorCellGridLeaf;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.EditorManager;
import de.slisson.mps.tables.runtime.gridmodel.HeaderGrid;
import java.awt.Color;
import jetbrains.mps.nodeEditor.MPSColors;
import de.slisson.mps.tables.runtime.gridmodel.Header;
import de.slisson.mps.tables.runtime.gridmodel.EditorCellHeader;
import de.slisson.mps.tables.runtime.gridmodel.StringHeaderReference;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;

public class User_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createPartialTable_1jbsxc_a(editorContext, node);
  }
  private jetbrains.mps.nodeEditor.cells.EditorCell createPartialTable_1jbsxc_a(final EditorContext editorContext, final SNode node) {
    ChildsTracker childsTracker = null;

    try {
      ChildsTracker.pushNewInstance();
      final Grid grid = createStaticHorizontal_1jbsxc_a0(editorContext, node);
      final Style style = new ITableStyleFactory() {
        public Style createStyle(final int columnIndex, final int rowIndex) {
          Style style = new StyleImpl();
          return style;
        }
      }.createStyle(0, 0);
      grid.setStyle(style);

      childsTracker = ChildsTracker.popInstance();
      if (childsTracker == null) {
        return new EditorCell_Error(editorContext, node, "not inside table");
      }
      PartialTableEditor editorCell = new PartialTableEditor(editorContext, node, grid);
      ChildsTracker.getInstance().registerChild(editorCell);
      editorCell.initChilds(childsTracker);

      editorCell.setCellId("PartialTable_1jbsxc_a");
      editorCell.setBig(true);
      editorCell.init();
      return editorCell;
    } catch (RuntimeException ex) {
      if (childsTracker == null) {
        ChildsTracker.popInstance();
      }
      throw ex;
    }
  }
  public Grid createStaticHorizontal_1jbsxc_a0(final EditorContext editorContext, final SNode node) {
    Grid grid = new Grid();

    List<Grid> children = new ArrayList<Grid>(4);
    if (true) {
      children.add(createTableCell_1jbsxc_a0a(editorContext, node));
    }
    if (true) {
      children.add(createTableCell_1jbsxc_b0a(editorContext, node));
    }
    if (true) {
      children.add(createTableCell_1jbsxc_c0a(editorContext, node));
    }
    if (true) {
      children.add(createTableCell_1jbsxc_d0a(editorContext, node));
    }
    int maxHeight = grid.getRowHeadersSizeY();
    for (Grid child : ListSequence.fromList(children)) {
      maxHeight = Math.max(maxHeight, child.getSizeY());
    }
    for (int x = 0; x < children.size(); x++) {
      if (maxHeight > 0) {
        children.get(x).setSpanY(maxHeight);
      }
      grid.setElement(x, 0, children.get(x));
    }
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }.createStyle(0, 0);
    grid.setStyle(style);
    return grid;
  }
  public Grid createTableCell_1jbsxc_a0a(final EditorContext editorContext, final SNode node) {

    EditorCell cell = createProperty_1jbsxc_a0a0(editorContext, node);
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }.createStyle(0, 0);

    Grid grid;
    if (cell instanceof PartialTableEditor) {
      grid = ((PartialTableEditor) cell).getGrid().clone();
    } else {
      grid = new Grid();
      EditorCellGridLeaf leaf = new EditorCellGridLeaf(cell);
      leaf.setStyle(style);
      grid.setElement(0, 0, leaf);
    }
    grid.setColumnHeaders(0, 0, createEditorCellHeader_1jbsxc_a0a0(editorContext, node));

    return grid;
  }
  private EditorCell createProperty_1jbsxc_a0a0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name");
    Style style = new StyleImpl();
    style.set(StyleAttributes.FONT_STYLE, 0, MPSFonts.BOLD);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  public HeaderGrid createEditorCellHeader_1jbsxc_a0a0(final EditorContext editorContext, final SNode node) {
    HeaderGrid grid = new HeaderGrid();
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        style.set(StyleAttributes.getInstance().<Color>getAttribute("de.slisson.mps.tables", "border-bottom-color"), 0, MPSColors.black);
        style.set(StyleAttributes.getInstance().<Color>getAttribute("de.slisson.mps.tables", "shade-color"), 0, MPSColors.lightGray);
        style.set(StyleAttributes.getInstance().<Integer>getAttribute("de.slisson.mps.tables", "border-bottom-width"), 0, 2);
        return style;
      }
    }.createStyle(0, 0);
    final EditorCell cell = createConstant_1jbsxc_a0a0a(editorContext, node);
    Header header = new EditorCellHeader(new StringHeaderReference("8479184967784017303"), cell);
    header.setStyle(style);
    grid.setElement(0, 0, header);
    return grid;
  }
  private EditorCell createConstant_1jbsxc_a0a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "ID");
    editorCell.setCellId("Constant_1jbsxc_a0a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  public Grid createTableCell_1jbsxc_b0a(final EditorContext editorContext, final SNode node) {

    EditorCell cell = createProperty_1jbsxc_a1a0(editorContext, node);
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }.createStyle(0, 0);

    Grid grid;
    if (cell instanceof PartialTableEditor) {
      grid = ((PartialTableEditor) cell).getGrid().clone();
    } else {
      grid = new Grid();
      EditorCellGridLeaf leaf = new EditorCellGridLeaf(cell);
      leaf.setStyle(style);
      grid.setElement(0, 0, leaf);
    }
    grid.setColumnHeaders(0, 0, createEditorCellHeader_1jbsxc_a1a0(editorContext, node));

    return grid;
  }
  private EditorCell createProperty_1jbsxc_a1a0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("firstName");
    provider.setNoTargetText("<no firstName>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_firstName");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  public HeaderGrid createEditorCellHeader_1jbsxc_a1a0(final EditorContext editorContext, final SNode node) {
    HeaderGrid grid = new HeaderGrid();
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        style.set(StyleAttributes.getInstance().<Color>getAttribute("de.slisson.mps.tables", "border-bottom-color"), 0, MPSColors.black);
        style.set(StyleAttributes.getInstance().<Color>getAttribute("de.slisson.mps.tables", "shade-color"), 0, MPSColors.lightGray);
        style.set(StyleAttributes.getInstance().<Integer>getAttribute("de.slisson.mps.tables", "border-bottom-width"), 0, 2);
        return style;
      }
    }.createStyle(0, 0);
    final EditorCell cell = createConstant_1jbsxc_a0b0a(editorContext, node);
    Header header = new EditorCellHeader(new StringHeaderReference("8479184967784017315"), cell);
    header.setStyle(style);
    grid.setElement(0, 0, header);
    return grid;
  }
  private EditorCell createConstant_1jbsxc_a0b0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "First");
    editorCell.setCellId("Constant_1jbsxc_a0b0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  public Grid createTableCell_1jbsxc_c0a(final EditorContext editorContext, final SNode node) {

    EditorCell cell = createProperty_1jbsxc_a2a0(editorContext, node);
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }.createStyle(0, 0);

    Grid grid;
    if (cell instanceof PartialTableEditor) {
      grid = ((PartialTableEditor) cell).getGrid().clone();
    } else {
      grid = new Grid();
      EditorCellGridLeaf leaf = new EditorCellGridLeaf(cell);
      leaf.setStyle(style);
      grid.setElement(0, 0, leaf);
    }
    grid.setColumnHeaders(0, 0, createEditorCellHeader_1jbsxc_a2a0(editorContext, node));

    return grid;
  }
  private EditorCell createProperty_1jbsxc_a2a0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("lastName");
    provider.setNoTargetText("<no lastName>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_lastName");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  public HeaderGrid createEditorCellHeader_1jbsxc_a2a0(final EditorContext editorContext, final SNode node) {
    HeaderGrid grid = new HeaderGrid();
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        style.set(StyleAttributes.getInstance().<Color>getAttribute("de.slisson.mps.tables", "border-bottom-color"), 0, MPSColors.black);
        style.set(StyleAttributes.getInstance().<Color>getAttribute("de.slisson.mps.tables", "shade-color"), 0, MPSColors.lightGray);
        style.set(StyleAttributes.getInstance().<Integer>getAttribute("de.slisson.mps.tables", "border-bottom-width"), 0, 2);
        return style;
      }
    }.createStyle(0, 0);
    final EditorCell cell = createConstant_1jbsxc_a0c0a(editorContext, node);
    Header header = new EditorCellHeader(new StringHeaderReference("8479184967784017335"), cell);
    header.setStyle(style);
    grid.setElement(0, 0, header);
    return grid;
  }
  private EditorCell createConstant_1jbsxc_a0c0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Last");
    editorCell.setCellId("Constant_1jbsxc_a0c0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  public Grid createTableCell_1jbsxc_d0a(final EditorContext editorContext, final SNode node) {

    EditorCell cell = createProperty_1jbsxc_a3a0(editorContext, node);
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        return style;
      }
    }.createStyle(0, 0);

    Grid grid;
    if (cell instanceof PartialTableEditor) {
      grid = ((PartialTableEditor) cell).getGrid().clone();
    } else {
      grid = new Grid();
      EditorCellGridLeaf leaf = new EditorCellGridLeaf(cell);
      leaf.setStyle(style);
      grid.setElement(0, 0, leaf);
    }
    grid.setColumnHeaders(0, 0, createEditorCellHeader_1jbsxc_a3a0(editorContext, node));

    return grid;
  }
  private EditorCell createProperty_1jbsxc_a3a0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("email");
    provider.setNoTargetText("<no email>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_email");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  public HeaderGrid createEditorCellHeader_1jbsxc_a3a0(final EditorContext editorContext, final SNode node) {
    HeaderGrid grid = new HeaderGrid();
    final Style style = new ITableStyleFactory() {
      public Style createStyle(final int columnIndex, final int rowIndex) {
        Style style = new StyleImpl();
        style.set(StyleAttributes.getInstance().<Color>getAttribute("de.slisson.mps.tables", "border-bottom-color"), 0, MPSColors.black);
        style.set(StyleAttributes.getInstance().<Color>getAttribute("de.slisson.mps.tables", "shade-color"), 0, MPSColors.lightGray);
        style.set(StyleAttributes.getInstance().<Integer>getAttribute("de.slisson.mps.tables", "border-bottom-width"), 0, 2);
        return style;
      }
    }.createStyle(0, 0);
    final EditorCell cell = createConstant_1jbsxc_a0d0a(editorContext, node);
    Header header = new EditorCellHeader(new StringHeaderReference("8479184967784017363"), cell);
    header.setStyle(style);
    grid.setElement(0, 0, header);
    return grid;
  }
  private EditorCell createConstant_1jbsxc_a0d0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Email");
    editorCell.setCellId("Constant_1jbsxc_a0d0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
}
