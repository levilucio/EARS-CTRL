package org.iets3.core.users.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class check_UserDirectory_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_UserDirectory_NonTypesystemRule() {
  }
  public void applyRule(final SNode dir, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    final Set<String> usernames = SetSequence.fromSet(new HashSet<String>());
    ListSequence.fromList(SLinkOperations.getChildren(dir, MetaAdapterFactory.getContainmentLink(0xf95247f1a2854e98L, 0x864f7f4b1723a807L, 0x75ac1dcdb5651a3eL, 0x75ac1dcdb5651a41L, "users"))).visitAll(new IVisitor<SNode>() {
      public void visit(SNode u) {
        if (SetSequence.fromSet(usernames).contains(SPropertyOperations.getString(u, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(u, "duplicate user name", "r:5e7dd795-0938-4cb5-ba40-61676fbb65f5(org.iets3.core.users.typesystem)", "8479184967780624442", null, errorTarget);
          }
        }
        SetSequence.fromSet(usernames).addElement(SPropertyOperations.getString(u, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      }
    });
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0xf95247f1a2854e98L, 0x864f7f4b1723a807L, 0x75ac1dcdb5651a3eL, "org.iets3.core.users.structure.UserDirectory");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
