package org.iets3.core.users.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class UserDirectory__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xf95247f1a2854e98L, 0x864f7f4b1723a807L, 0x75ac1dcdb5651a3eL, "org.iets3.core.users.structure.UserDirectory");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Iterable<SNode>> dependencies_id6clJcrJYPM5 = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("dependencies").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6clJcrJYPM5").registry(REGISTRY).build();
  public static final SMethod<Iterable<SNode>> allReferenceableContentsInChunk_id6clJcrKmVSn = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("allReferenceableContentsInChunk").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6clJcrKmVSn").registry(REGISTRY).build();
  public static final SMethod<Iterable<SNode>> externallyReferenceableContentsInChunk_id6clJcrKmX4x = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("externallyReferenceableContentsInChunk").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6clJcrKmX4x").registry(REGISTRY).build();
  public static final SMethod<Void> addGenericDependecy_id94IdDK$n_l = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("addGenericDependecy").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("94IdDK$n_l").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(dependencies_id6clJcrJYPM5, allReferenceableContentsInChunk_id6clJcrKmVSn, externallyReferenceableContentsInChunk_id6clJcrKmX4x, addGenericDependecy_id94IdDK$n_l);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static Iterable<SNode> dependencies_id6clJcrJYPM5(@NotNull SNode __thisNode__) {
    return new ArrayList<SNode>();
  }
  /*package*/ static Iterable<SNode> allReferenceableContentsInChunk_id6clJcrKmVSn(@NotNull SNode __thisNode__) {
    return SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0xf95247f1a2854e98L, 0x864f7f4b1723a807L, 0x75ac1dcdb5651a3eL, 0x75ac1dcdb5651a41L, "users"));
  }
  /*package*/ static Iterable<SNode> externallyReferenceableContentsInChunk_id6clJcrKmX4x(@NotNull SNode __thisNode__) {
    return SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0xf95247f1a2854e98L, 0x864f7f4b1723a807L, 0x75ac1dcdb5651a3eL, 0x75ac1dcdb5651a41L, "users"));
  }
  /*package*/ static void addGenericDependecy_id94IdDK$n_l(@NotNull SNode __thisNode__, SNode dep) {
    throw new UnsupportedOperationException("not supported");
  }

  /*package*/ UserDirectory__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Iterable<SNode>) dependencies_id6clJcrJYPM5(node));
      case 1:
        return (T) ((Iterable<SNode>) allReferenceableContentsInChunk_id6clJcrKmVSn(node));
      case 2:
        return (T) ((Iterable<SNode>) externallyReferenceableContentsInChunk_id6clJcrKmX4x(node));
      case 3:
        addGenericDependecy_id94IdDK$n_l(node, (SNode) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
