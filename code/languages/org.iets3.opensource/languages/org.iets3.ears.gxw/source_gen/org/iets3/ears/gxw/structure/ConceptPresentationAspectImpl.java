package org.iets3.ears.gxw.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractEventDrivenReq = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractStateDrivenReq = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractUbiquitousReq = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Alias = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AliasFormulaSR = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AliasFormulaTr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AliasName = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AndFormulaSR = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AndFormulaTr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AtomicFormulaSR = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AtomicFormulaTr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryFormulaSR = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryFormulaTr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ComplexEventDrivenReq = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ComponentName = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ComponentResponse = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ComponentTrigger = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EventDrivenReq = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GlossaryChunk = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0s).create();
  private final ConceptPresentation props_Happens = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HappensStable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Invariant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NormalUbiquitousReq = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotFormulaSR = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotFormulaTr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Occurs = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrFormulaSR = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrFormulaTr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropositionalFormulaSR = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropositionalFormulaTr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequirementChunk = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0eb).create();
  private final ConceptPresentation props_RequirementTemplate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResponseAlias = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResponseAliasName = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResponseInvariant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StateDrivenReq = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TriggerAlias = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TriggerAliasName = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TriggerInvariant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TriggerModifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnaryFormulaSR = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnaryFormulaTr = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnwantedReq = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractEventDrivenReq;
      case 1:
        return props_AbstractStateDrivenReq;
      case 2:
        return props_AbstractUbiquitousReq;
      case 3:
        return props_Alias;
      case 4:
        return props_AliasFormulaSR;
      case 5:
        return props_AliasFormulaTr;
      case 6:
        return props_AliasName;
      case 7:
        return props_AndFormulaSR;
      case 8:
        return props_AndFormulaTr;
      case 9:
        return props_AtomicFormulaSR;
      case 10:
        return props_AtomicFormulaTr;
      case 11:
        return props_BinaryFormulaSR;
      case 12:
        return props_BinaryFormulaTr;
      case 13:
        return props_ComplexEventDrivenReq;
      case 14:
        return props_ComponentName;
      case 15:
        return props_ComponentResponse;
      case 16:
        return props_ComponentTrigger;
      case 17:
        return props_EventDrivenReq;
      case 18:
        return props_GlossaryChunk;
      case 19:
        return props_Happens;
      case 20:
        return props_HappensStable;
      case 21:
        return props_Invariant;
      case 22:
        return props_NormalUbiquitousReq;
      case 23:
        return props_NotFormulaSR;
      case 24:
        return props_NotFormulaTr;
      case 25:
        return props_Occurs;
      case 26:
        return props_OrFormulaSR;
      case 27:
        return props_OrFormulaTr;
      case 28:
        return props_PropositionalFormulaSR;
      case 29:
        return props_PropositionalFormulaTr;
      case 30:
        return props_RequirementChunk;
      case 31:
        return props_RequirementTemplate;
      case 32:
        return props_ResponseAlias;
      case 33:
        return props_ResponseAliasName;
      case 34:
        return props_ResponseInvariant;
      case 35:
        return props_StateDrivenReq;
      case 36:
        return props_TriggerAlias;
      case 37:
        return props_TriggerAliasName;
      case 38:
        return props_TriggerInvariant;
      case 39:
        return props_TriggerModifier;
      case 40:
        return props_UnaryFormulaSR;
      case 41:
        return props_UnaryFormulaTr;
      case 42:
        return props_UnwantedReq;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
