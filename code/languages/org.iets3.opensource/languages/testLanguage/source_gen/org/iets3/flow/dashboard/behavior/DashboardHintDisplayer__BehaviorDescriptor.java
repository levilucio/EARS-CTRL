package org.iets3.flow.dashboard.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class DashboardHintDisplayer__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x20fc30679cdcee4aL, "org.iets3.flow.dashboard.structure.DashboardHintDisplayer");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<Tuples._4<List<SNode>, List<SNode>, List<SNode>, List<SNode>>> getFlowState_id23Wc6usUwlN = new SMethodBuilder<Tuples._4<List<SNode>, List<SNode>, List<SNode>, List<SNode>>>(new SJavaCompoundTypeImpl((Class<Tuples._4<List<SNode>, List<SNode>, List<SNode>, List<SNode>>>) ((Class) Object.class))).name("getFlowState").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("23Wc6usUwlN").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(SRepository.class, ""));
  public static final SMethod<Void> updateDashboardData_id6Zy$B2weZrR = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("updateDashboardData").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6Zy$B2weZrR").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getFlowState_id23Wc6usUwlN, updateDashboardData_id6Zy$B2weZrR);

  private static void ___init___(@NotNull SNode __thisNode__) {
    SModel flowModel = SModelRepository.getInstance().getModelDescriptor("FlowModel");
    SNode flowData = ListSequence.fromList(SModelOperations.roots(flowModel, MetaAdapterFactory.getConcept(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x3b5f775e0d415b00L, "org.iets3.flow.dashboard.structure.FlowData"))).first();
    for (SNode state : ListSequence.fromList(SLinkOperations.getChildren(flowData, MetaAdapterFactory.getContainmentLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x3b5f775e0d415b00L, 0x5337259791af784dL, "stateList")))) {
      SPropertyOperations.set(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79175dbL, "mode"), "2");
      SPropertyOperations.set(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0xf151507b83a18b2L, "wentBackState"), "" + (false));
    }
    SLinkOperations.setTarget(flowData, MetaAdapterFactory.getReferenceLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x3b5f775e0d415b00L, 0xf151507b87008a0L, "furthestVisitedState"), ListSequence.fromList(SLinkOperations.getChildren(flowData, MetaAdapterFactory.getContainmentLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x3b5f775e0d415b00L, 0x5337259791af784dL, "stateList"))).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.getBoolean(it, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c7248195L, "isStart"));
      }
    }));
  }

  /*package*/ static Tuples._4<List<SNode>, List<SNode>, List<SNode>, List<SNode>> getFlowState_id23Wc6usUwlN(@NotNull SNode __thisNode__, SRepository repo) {

    DashboardUtility utility = new DashboardUtility(SNodeOperations.getModel(__thisNode__), repo);
    Tuples._4<List<SNode>, List<SNode>, List<SNode>, List<SNode>> res;
    res = utility.updateFlowState();
    return res;
  }
  /*package*/ static void updateDashboardData_id6Zy$B2weZrR(@NotNull SNode __thisNode__) {
    SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x20fc30679cdcee4aL, 0x6fe292709f695dc0L, "dataFlowChild")), MetaAdapterFactory.getContainmentLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x3b5f775e0d415b00L, 0x5337259791af784dL, "stateList")).clear();
    SLinkOperations.setTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x20fc30679cdcee4aL, 0x6fe292709f695dc0L, "dataFlowChild"), SNodeOperations.copyNode(ListSequence.fromList(SModelOperations.roots(SModelRepository.getInstance().getModelDescriptor("FlowModel"), MetaAdapterFactory.getConcept(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x3b5f775e0d415b00L, "org.iets3.flow.dashboard.structure.FlowData"))).first()));

  }

  /*package*/ DashboardHintDisplayer__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Tuples._4<List<SNode>, List<SNode>, List<SNode>, List<SNode>>) getFlowState_id23Wc6usUwlN(node, (SRepository) parameters[0]));
      case 1:
        updateDashboardData_id6Zy$B2weZrR(node);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
