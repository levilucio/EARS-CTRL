package org.iets3.flow.dashboard.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import de.itemis.mps.editor.diagram.runtime.model.EditorCell_DiagramElement;
import de.itemis.mps.editor.diagram.runtime.ContextVariables;
import java.util.List;
import de.itemis.mps.editor.diagram.runtime.model.Port;
import java.util.ArrayList;
import de.itemis.mps.editor.diagram.runtime.shape.IShape;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import de.itemis.mps.editor.diagram.runtime.model.IBoxAccessor;
import de.itemis.mps.editor.diagram.runtime.model.SNodeBoxAccessor;
import org.jetbrains.annotations.NotNull;
import de.itemis.mps.editor.diagram.runtime.model.IDiagramElementAccessor;
import de.itemis.mps.editor.diagram.runtime.model.IAccessorFactory;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;

public class State_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createDiagramNode_sjqidp_a(editorContext, node);
  }
  private EditorCell createDiagramNode_sjqidp_a(final EditorContext editorContext, final SNode node) {

    final Wrappers._T<EditorCell_DiagramElement> editorCell = new Wrappers._T<EditorCell_DiagramElement>(null);

    ContextVariables.withValue("thisNode", node, new Runnable() {
      public void run() {
        final ContextVariables _variablesContext = ContextVariables.getCurrent();
        final List<Port> ports = new ArrayList<Port>();

        EditorCell contentCell = createCollection_sjqidp_a0(editorContext, node);
        final List<EditorCell> contentCells = new ArrayList<EditorCell>();
        final IShape shape = new BoxVisulisation(SPropertyOperations.getInteger_def(((SNode) _variablesContext.getValue("thisNode")), MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79175dbL, "mode"), "2"), SPropertyOperations.getBoolean(((SNode) _variablesContext.getValue("thisNode")), MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c7248195L, "isStart")), SPropertyOperations.getBoolean(((SNode) _variablesContext.getValue("thisNode")), MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79e9fc6L, "isFinal")));


        IBoxAccessor accessor = new SNodeBoxAccessor(node) {
          @NotNull
          public List<Port> getPorts() {
            return ports;
          }
          public IShape getShape() {
            return shape;
          }
          @Override
          @NotNull
          public List<EditorCell> getContentCells() {
            if (contentCells.isEmpty()) {
              contentCells.add(getRootEditorCell());
            }
            return contentCells;
          }

          public List<? extends IDiagramElementAccessor> getElements(IAccessorFactory accessorFactory) {
            final List<IDiagramElementAccessor> elements = new ArrayList<IDiagramElementAccessor>();
            return elements;
          }





        };

        editorCell.value = new EditorCell_DiagramElement(editorContext, node, accessor);
        editorCell.value.setCellId("DiagramNode_sjqidp_a");
        editorCell.value.setBig(true);
        Style style = new StyleImpl();
        if (State_Editor._StyleParameter_QueryFunction_sjqidp_a0a(editorContext, node)) {
          {
            final Style styleToPut = new StyleImpl();
            BoxColor_StyleSheet.apply_greenColor(styleToPut, editorCell.value);
            style.putAll(styleToPut, 0);
          }
        }
        if (State_Editor._StyleParameter_QueryFunction_sjqidp_a1a(editorContext, node)) {
          {
            final Style styleToPut = new StyleImpl();
            BoxColor_StyleSheet.apply_grayColor(styleToPut, editorCell.value);
            style.putAll(styleToPut, 0);
          }
        }
        if (State_Editor._StyleParameter_QueryFunction_sjqidp_a2a(editorContext, node)) {
          {
            final Style styleToPut = new StyleImpl();
            BoxColor_StyleSheet.apply_orangeColor(styleToPut, editorCell.value);
            style.putAll(styleToPut, 0);
          }
        }
        if (State_Editor._StyleParameter_QueryFunction_sjqidp_a3a(editorContext, node)) {
          {
            final Style styleToPut = new StyleImpl();
            BoxColor_StyleSheet.apply_whiteColor(styleToPut, editorCell.value);
            style.putAll(styleToPut, 0);
          }
        }
        editorCell.value.getStyle().putAll(style);

        editorCell.value.addEditorCell(contentCell);
      }
    });

    return editorCell.value;
  }
  private static boolean _StyleParameter_QueryFunction_sjqidp_a0a(EditorContext editorContext, SNode node) {
    if (SPropertyOperations.getInteger_def(node, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79175dbL, "mode"), "2") == 0) {
      return true;
    }
    return false;
  }
  private static boolean _StyleParameter_QueryFunction_sjqidp_a1a(EditorContext editorContext, SNode node) {
    if (SPropertyOperations.getInteger_def(node, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79175dbL, "mode"), "2") == 3) {
      return true;
    }
    return false;
  }
  private static boolean _StyleParameter_QueryFunction_sjqidp_a2a(EditorContext editorContext, SNode node) {
    if (SPropertyOperations.getInteger_def(node, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79175dbL, "mode"), "2") == 1) {
      return true;
    }
    return false;
  }
  private static boolean _StyleParameter_QueryFunction_sjqidp_a3a(EditorContext editorContext, SNode node) {
    if (SPropertyOperations.getInteger_def(node, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79175dbL, "mode"), "2") == 2) {
      return true;
    }
    return false;
  }
  private EditorCell createCollection_sjqidp_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_sjqidp_a0");
    editorCell.addEditorCell(this.createProperty_sjqidp_a0a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_sjqidp_b0a(editorContext, node));
    return editorCell;
  }
  private EditorCell createProperty_sjqidp_a0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("name");
    provider.setNoTargetText("<no name>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_name");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_sjqidp_b0a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_sjqidp_b0a");
    editorCell.addEditorCell(this.createConstant_sjqidp_a1a0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_sjqidp_b1a0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_sjqidp_a1a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Status:");
    editorCell.setCellId("Constant_sjqidp_a1a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_sjqidp_b1a0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("mode");
    provider.setNoTargetText("<no mode>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_mode");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
}
