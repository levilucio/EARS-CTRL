package org.iets3.flow.dashboard.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.SModelRepository;
import java.util.List;
import org.jetbrains.mps.openapi.model.EditableSModel;
import org.jetbrains.mps.openapi.model.SModelChangeListener;
import org.iets3.flow.dashboard.behavior.DashboardUtility;
import org.jetbrains.mps.openapi.model.SReference;

public class Populatefactory {
  public static class NodeFactory_8062167295362760351 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {

      SLinkOperations.setTarget(newNode, MetaAdapterFactory.getContainmentLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x20fc30679cdcee4aL, 0x6fe292709f695dc0L, "dataFlowChild"), SNodeOperations.copyNode(ListSequence.fromList(SModelOperations.roots(SModelRepository.getInstance().getModelDescriptor("FlowModel"), MetaAdapterFactory.getConcept(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x3b5f775e0d415b00L, "org.iets3.flow.dashboard.structure.FlowData"))).first()));

      System.out.println("model type------------------>" + SModelOperations.getModelName(model));

      final SModel theModel = model;
      SNode st = ListSequence.fromList(SModelOperations.roots(SModelRepository.getInstance().getModelDescriptor("FlowModel"), MetaAdapterFactory.getConcept(0x89749848cf4d49abL, 0x8c2b7275de1b311dL, 0x14c36546aaf89a25L, "org.iets3.flow.modelproperty.state.structure.PropertyState"))).first();
      final List<SNode> prs = SLinkOperations.getChildren(st, MetaAdapterFactory.getContainmentLink(0x89749848cf4d49abL, 0x8c2b7275de1b311dL, 0x14c36546aaf89a25L, 0x6f6d67de49119611L, "listofPropertyRows"));

      if (theModel instanceof EditableSModel) {
        EditableSModel model1 = ((EditableSModel) theModel);
        model1.addChangeListener(new SModelChangeListener() {
          public void nodeAdded(SModel p0, SNode p1, String p2, SNode p3) {
            System.out.println("Node is added of Type (p3)-------->" + p3.getConcept().getName());
            // start filtering for affected concept 
            DashboardUtility.AffectedConceptsAddChanged(prs, p3.getConcept().getName(), theModel);
          }
          public void nodeRemoved(SModel p0, SNode p1, String p2, SNode p3) {
            System.out.println("Node is removed of Type (p3)------------------------->" + p3.getConcept().getName());
            DashboardUtility.AffectedConceptsRemoved(prs, p3.getConcept().getName());
          }
          public void propertyChanged(SNode p0, String p1, String p2, String p3) {

            System.out.println("property Changed (p0):----------------->" + p1 + "   of Concept--->" + p0.getConcept().getName());
            DashboardUtility.AffectedConceptsAddChanged(prs, p0.getConcept().getName(), theModel);
          }
          public void referenceChanged(SNode p0, String p1, SReference p2, SReference p3) {
          }
        });
      }

    }
  }
}
