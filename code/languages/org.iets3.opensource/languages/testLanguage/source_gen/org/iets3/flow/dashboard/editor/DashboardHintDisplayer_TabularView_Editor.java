package org.iets3.flow.dashboard.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.editor.runtime.style.CellAlign;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.nodeEditor.cells.EditorCell_ContextAssistantComponent;
import jetbrains.mps.editor.runtime.style.FocusPolicy;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import javax.swing.JComboBox;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.smodel.ModelAccess;
import de.itemis.mps.editor.diagram.runtime.CompartmentCell;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.table.DefaultTableModel;
import javax.swing.JTable;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.iets3.flow.dashboard.behavior.TableRenderer;
import javax.swing.JScrollPane;
import java.awt.Dimension;

public class DashboardHintDisplayer_TabularView_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"org.iets3.flow.dashboard.editor.DashboardVisualisation.TabularView"});
  @Override
  @NotNull
  public Collection<String> getContextHints() {
    return myContextHints;
  }
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_m9rjtm_a(editorContext, node);
  }
  private EditorCell createCollection_m9rjtm_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_m9rjtm_a");
    editorCell.setBig(true);
    Style style = new StyleImpl();
    style.set(StyleAttributes.DRAW_BORDER, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_m9rjtm_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_m9rjtm_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_m9rjtm_c0(editorContext, node));
    editorCell.addEditorCell(this.createContextAssistant_m9rjtm_d0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_m9rjtm_e0(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_m9rjtm_f0(editorContext, node));
    editorCell.addEditorCell(this.createCompartment_m9rjtm_g0(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_m9rjtm_h0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_m9rjtm_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Cooling System Requirements Dashboard");
    editorCell.setCellId("Constant_m9rjtm_a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.FONT_SIZE, 0, 20);
    style.set(StyleAttributes.HORIZONTAL_ALIGN, 0, CellAlign.CENTER);
    style.set(StyleAttributes.DRAW_BORDER, 0, true);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.blue));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_m9rjtm_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_m9rjtm_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_m9rjtm_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "User Guidance Hint:");
    editorCell.setCellId("Constant_m9rjtm_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createContextAssistant_m9rjtm_d0(final EditorContext editorContext, final SNode node) {
    EditorCell editorCell = new EditorCell_ContextAssistantComponent(editorContext, node);
    editorCell.setCellId("ContextAssistant_m9rjtm_d0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private EditorCell createConstant_m9rjtm_e0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_m9rjtm_e0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, 0, true);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    if (true) {
      editorCell.getStyle().set(StyleAttributes.FOCUS_POLICY, FocusPolicy.ATTRACTS_FOCUS);
    }
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createJComponent_m9rjtm_f0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, DashboardHintDisplayer_TabularView_Editor._QueryFunction_JComponent_m9rjtm_a5a(node, editorContext), "_m9rjtm_f0");
    editorCell.setCellId("JComponent_m9rjtm_f0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private static JComponent _QueryFunction_JComponent_m9rjtm_a5a(final SNode node, final EditorContext editorContext) {
    String[] hints = new String[]{"Tabular", "Graph-like"};

    final JComboBox<String> combobox = new JComboBox<String>(hints);
    combobox.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        JComboBox<String> combo = ((JComboBox<String>) p0.getSource());
        String selectedOption = ((String) combo.getSelectedItem());

        if (selectedOption.equals("Tabular")) {
          ModelAccess.instance().runReadAction(new Runnable() {
            public void run() {
              editorContext.getEditorComponentState().clearSessionState();
              editorContext.getEditorComponent().getUpdater().setInitialEditorHints(new String[]{"org.iets3.flow.dashboard.editor.DashboardVisualisation.TabularView"});
              editorContext.getEditorComponent().update();

            }
          });

          System.out.println("its tabular visulisation");
        } else if (selectedOption.equals("Graph-like")) {
          ModelAccess.instance().runReadAction(new Runnable() {
            public void run() {
              editorContext.getEditorComponentState().clearSessionState();
              editorContext.getEditorComponent().getUpdater().setInitialEditorHints(new String[]{"org.iets3.flow.dashboard.editor.DashboardVisualisation.DirectedGraph"});
              editorContext.getEditorComponent().update();


            }
          });


          System.out.println("its directed Graph");
        }
      }
    });
    return combobox;
  }
  private EditorCell createCompartment_m9rjtm_g0(EditorContext editorContext, SNode node) {
    CompartmentCell editorCell = new CompartmentCell(editorContext, node);
    editorCell.setCellId("Compartment_m9rjtm_g0");
    return editorCell;
  }
  private EditorCell createJComponent_m9rjtm_h0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, DashboardHintDisplayer_TabularView_Editor._QueryFunction_JComponent_m9rjtm_a7a(node, editorContext), "_m9rjtm_h0");
    editorCell.setCellId("JComponent_m9rjtm_h0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.INDENT_LAYOUT_ON_NEW_LINE, 0, true);
    style.set(StyleAttributes.INDENT_LAYOUT_NEW_LINE, 0, true);
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private static JComponent _QueryFunction_JComponent_m9rjtm_a7a(final SNode node, final EditorContext editorContext) {

    final SModel flowModel = SModelRepository.getInstance().getModelDescriptor("FlowModel");
    final Iterable<SNode> states = ListSequence.fromList(SModelOperations.roots(flowModel, MetaAdapterFactory.getConcept(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x3b5f775e0d415b00L, "org.iets3.flow.dashboard.structure.FlowData"))).translate(new ITranslator2<SNode, SNode>() {
      public Iterable<SNode> translate(SNode it) {
        return SLinkOperations.getChildren(it, MetaAdapterFactory.getContainmentLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x3b5f775e0d415b00L, 0x5337259791af784dL, "stateList"));
      }
    });

    ArrayList<String> stateModesList = new ArrayList<String>();
    stateModesList.add("Visited");
    stateModesList.add("Current");
    stateModesList.add("ToCome");
    stateModesList.add("DontCare");

    JFrame frame = new JFrame();
    JPanel panel = new JPanel();

    panel.setName("Flow Visualisation");
    panel.setLayout(new BorderLayout());

    DefaultTableModel defTable = new DefaultTableModel();

    JTable table = new JTable(defTable);
    table.setAutoscrolls(true);
    final int stateIndex = Sequence.fromIterable(states).count();
    defTable.addColumn("State Name");
    defTable.addColumn("State Type");
    defTable.addColumn("Status");
    defTable.addColumn("NextStates");

    for (SNode state : Sequence.fromIterable(states)) {


      if (ListSequence.fromList(SLinkOperations.getChildren(state, MetaAdapterFactory.getContainmentLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c72e53c4L, "nextStates"))).isEmpty()) {
        String stateType = "";
        if (SPropertyOperations.getInteger_def(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79175dbL, "mode"), "2") == 0) {
          if (SPropertyOperations.getBoolean(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79e9fc6L, "isFinal"))) {
            stateType = "Final";
          } else if (SPropertyOperations.getBoolean(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c7248195L, "isStart"))) {
            stateType = "Start";
          } else {
            stateType = "Intermediate";
          }


          defTable.addRow(new Object[]{SPropertyOperations.getString(state, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), stateType, "Visited", "No Next State"});
          stateType = "";
        }

        if (SPropertyOperations.getInteger_def(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79175dbL, "mode"), "2") == 1) {
          if (SPropertyOperations.getBoolean(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79e9fc6L, "isFinal"))) {
            stateType = "Final";
          } else if (SPropertyOperations.getBoolean(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c7248195L, "isStart"))) {
            stateType = "Start";
          } else {
            stateType = "Intermediate";
          }

          defTable.addRow(new Object[]{SPropertyOperations.getString(state, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), stateType, "Current", "No Next State"});
          stateType = "";
        }
        if (SPropertyOperations.getInteger_def(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79175dbL, "mode"), "2") == 2) {
          if (SPropertyOperations.getBoolean(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79e9fc6L, "isFinal"))) {
            stateType = "Final";
          } else if (SPropertyOperations.getBoolean(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c7248195L, "isStart"))) {
            stateType = "Start";
          } else {
            stateType = "Intermediate";
          }

          defTable.addRow(new Object[]{SPropertyOperations.getString(state, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), stateType, "ToCome", "No Next State"});
          stateType = "";
        }
        if (SPropertyOperations.getInteger_def(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79175dbL, "mode"), "2") == 3) {
          if (SPropertyOperations.getBoolean(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79e9fc6L, "isFinal"))) {
            stateType = "Final";
          } else if (SPropertyOperations.getBoolean(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c7248195L, "isStart"))) {
            stateType = "Start";
          } else {
            stateType = "Intermediate";
          }

          defTable.addRow(new Object[]{SPropertyOperations.getString(state, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), stateType, "DontCare", "No Next State"});
          stateType = "";
        }

      }

      if (ListSequence.fromList(SLinkOperations.getChildren(state, MetaAdapterFactory.getContainmentLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c72e53c4L, "nextStates"))).isNotEmpty()) {
        String stateListString = " ";
        String stateType = "";
        if (ListSequence.fromList(SLinkOperations.getChildren(state, MetaAdapterFactory.getContainmentLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c72e53c4L, "nextStates"))).count() > 1) {

          if (SPropertyOperations.getBoolean(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79e9fc6L, "isFinal"))) {
            stateType = "Final";
          } else if (SPropertyOperations.getBoolean(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c7248195L, "isStart"))) {
            stateType = "Start";
          } else {
            stateType = "Intermediate";
          }


          for (SNode statenames : ListSequence.fromList(SLinkOperations.getChildren(state, MetaAdapterFactory.getContainmentLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c72e53c4L, "nextStates")))) {
            stateListString += SPropertyOperations.getString(SLinkOperations.getTarget(statenames, MetaAdapterFactory.getReferenceLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x73258383c7270020L, 0x73258383c7270021L, "nextStatePointer")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + ",";
          }
          defTable.addRow(new Object[]{SPropertyOperations.getString(state, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), stateType, stateModesList.get(SPropertyOperations.getInteger_def(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79175dbL, "mode"), "2")), stateListString});
          stateType = "";

        } else {
          if (SPropertyOperations.getBoolean(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79e9fc6L, "isFinal"))) {
            stateType = "Final";
          } else if (SPropertyOperations.getBoolean(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c7248195L, "isStart"))) {
            stateType = "Start";
          } else {
            stateType = "Intermediate";
          }

          defTable.addRow(new Object[]{SPropertyOperations.getString(state, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), stateType, stateModesList.get(SPropertyOperations.getInteger_def(state, MetaAdapterFactory.getProperty(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c79175dbL, "mode"), "2")), SPropertyOperations.getString(((SNode) ListSequence.fromList(SLinkOperations.getChildren(state, MetaAdapterFactory.getContainmentLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x5337259791ac255eL, 0x73258383c72e53c4L, "nextStates"))).where(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return (SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x73258383c7270020L, 0x73258383c7270021L, "nextStatePointer")) != null);
            }
          }).select(new ISelector<SNode, SNode>() {
            public SNode select(SNode it) {
              return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x73258383c7270020L, 0x73258383c7270021L, "nextStatePointer"));
            }
          }).first()), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"))});
          stateType = "";

        }

      }
    }

    TableRenderer t = new TableRenderer();


    JScrollPane scrollPane = new JScrollPane(t.getNewRenderedTable(table));
    panel.add(scrollPane, BorderLayout.NORTH);
    panel.setAutoscrolls(true);
    frame.getContentPane().add(panel);


    table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);


    panel.setPreferredSize(new Dimension(1100, 800));
    return panel;
  }
}
