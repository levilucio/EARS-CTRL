package org.iets3.table.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(5);
  /*package*/ final ConceptDescriptor myConceptCell = createDescriptorForCell();
  /*package*/ final ConceptDescriptor myConceptContent = createDescriptorForContent();
  /*package*/ final ConceptDescriptor myConceptHeader = createDescriptorForHeader();
  /*package*/ final ConceptDescriptor myConceptRow = createDescriptorForRow();
  /*package*/ final ConceptDescriptor myConceptTable = createDescriptorForTable();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptCell.getId(), 0);
    myIndexMap.put(myConceptContent.getId(), 1);
    myIndexMap.put(myConceptHeader.getId(), 2);
    myIndexMap.put(myConceptRow.getId(), 3);
    myIndexMap.put(myConceptTable.getId(), 4);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCell, myConceptContent, myConceptHeader, myConceptRow, myConceptTable);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptCell;
      case 1:
        return myConceptContent;
      case 2:
        return myConceptHeader;
      case 3:
        return myConceptRow;
      case 4:
        return myConceptTable;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForCell() {
    return new ConceptDescriptorBuilder("org.iets3.table.core.structure.Cell", MetaIdFactory.conceptId(0xaf3ce814fe754814L, 0x9ec91c4a57d0f39dL, 0x671fcf1785ced1daL)).version(1).interface_().sourceNode(new SNodePointer("r:2016b63d-0f9f-46eb-b71e-82e0e3453170(org.iets3.table.core.structure)", "7430885610120729050")).create();
  }
  private static ConceptDescriptor createDescriptorForContent() {
    return new ConceptDescriptorBuilder("org.iets3.table.core.structure.Content", MetaIdFactory.conceptId(0xaf3ce814fe754814L, 0x9ec91c4a57d0f39dL, 0x671fcf1785ce8cedL)).version(1).interface_().parents("org.iets3.table.core.structure.Row").parentIds(MetaIdFactory.conceptId(0xaf3ce814fe754814L, 0x9ec91c4a57d0f39dL, 0x671fcf1785ce8ce7L)).sourceNode(new SNodePointer("r:2016b63d-0f9f-46eb-b71e-82e0e3453170(org.iets3.table.core.structure)", "7430885610120711405")).create();
  }
  private static ConceptDescriptor createDescriptorForHeader() {
    return new ConceptDescriptorBuilder("org.iets3.table.core.structure.Header", MetaIdFactory.conceptId(0xaf3ce814fe754814L, 0x9ec91c4a57d0f39dL, 0x671fcf1785ce8ceaL)).version(1).interface_().parents("org.iets3.table.core.structure.Row").parentIds(MetaIdFactory.conceptId(0xaf3ce814fe754814L, 0x9ec91c4a57d0f39dL, 0x671fcf1785ce8ce7L)).sourceNode(new SNodePointer("r:2016b63d-0f9f-46eb-b71e-82e0e3453170(org.iets3.table.core.structure)", "7430885610120711402")).create();
  }
  private static ConceptDescriptor createDescriptorForRow() {
    return new ConceptDescriptorBuilder("org.iets3.table.core.structure.Row", MetaIdFactory.conceptId(0xaf3ce814fe754814L, 0x9ec91c4a57d0f39dL, 0x671fcf1785ce8ce7L)).version(1).interface_().childDescriptors(new ConceptDescriptorBuilder.Link(0x671fcf1785cefc24L, "cell", MetaIdFactory.conceptId(0xaf3ce814fe754814L, 0x9ec91c4a57d0f39dL, 0x671fcf1785ced1daL), true, true, false, new SNodePointer("r:2016b63d-0f9f-46eb-b71e-82e0e3453170(org.iets3.table.core.structure)", "7430885610120739876"))).children(new String[]{"cell"}, new boolean[]{true}).sourceNode(new SNodePointer("r:2016b63d-0f9f-46eb-b71e-82e0e3453170(org.iets3.table.core.structure)", "7430885610120711399")).create();
  }
  private static ConceptDescriptor createDescriptorForTable() {
    return new ConceptDescriptorBuilder("org.iets3.table.core.structure.Table", MetaIdFactory.conceptId(0xaf3ce814fe754814L, 0x9ec91c4a57d0f39dL, 0x671fcf1785ce8cd4L)).version(1).interface_().childDescriptors(new ConceptDescriptorBuilder.Link(0x671fcf1785ce8cf0L, "row", MetaIdFactory.conceptId(0xaf3ce814fe754814L, 0x9ec91c4a57d0f39dL, 0x671fcf1785ce8ce7L), true, true, false, new SNodePointer("r:2016b63d-0f9f-46eb-b71e-82e0e3453170(org.iets3.table.core.structure)", "7430885610120711408"))).children(new String[]{"row"}, new boolean[]{true}).sourceNode(new SNodePointer("r:2016b63d-0f9f-46eb-b71e-82e0e3453170(org.iets3.table.core.structure)", "7430885610120711380")).create();
  }
}
