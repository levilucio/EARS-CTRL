package org.iets3.table.coolingbehaviortable.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class CoolingBehaviorTable_Constraints extends BaseConstraintsDescriptor {
  public CoolingBehaviorTable_Constraints() {
    super(MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecd7dL, "org.iets3.table.coolingbehaviortable.structure.CoolingBehaviorTable"));
  }

  protected static Logger LOG = LogManager.getLogger(CoolingBehaviorTable_Constraints.class);
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "name";
        if ((SPropertyOperations.getString(propertyValue)).isEmpty()) {
          if (LOG.isInfoEnabled()) {
            LOG.info("Name of the Diehl-Table Cannot be Empty");
          }

          return false;
        }
        return true;
      }
    });
    return properties;
  }
}
