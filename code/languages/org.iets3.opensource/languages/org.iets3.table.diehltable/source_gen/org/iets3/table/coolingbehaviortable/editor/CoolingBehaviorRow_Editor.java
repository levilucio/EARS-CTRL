package org.iets3.table.coolingbehaviortable.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.openapi.editor.menus.transformation.SNodeLocation;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.impl.cellActions.CellAction_DeleteSmart;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.OldNewCompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.editor.runtime.style.CellAlign;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;

public class CoolingBehaviorRow_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_x41spq_a(editorContext, node);
  }
  private EditorCell createCollection_x41spq_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_x41spq_a");
    editorCell.setBig(true);
    Style style = new StyleImpl();
    style.set(StyleAttributes.DRAW_BORDER, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createRefNode_x41spq_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_x41spq_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_x41spq_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_x41spq_d0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_x41spq_e0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_x41spq_f0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_x41spq_g0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_x41spq_h0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_x41spq_i0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_x41spq_j0(editorContext, node));
    return editorCell;
  }
  private EditorCell createRefNode_x41spq_a0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new CoolingBehaviorRow_Editor.IncreasingIntervalSingleRoleHandler_x41spq_a0(node, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf30e4L, "IncreasingInterval"), editorContext);
    return provider.createCell();
  }
  private class IncreasingIntervalSingleRoleHandler_x41spq_a0 extends SingleRoleCellProvider {
    public IncreasingIntervalSingleRoleHandler_x41spq_a0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      myEditorContext.getCellFactory().pushCellContext();
      myEditorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromNode(child));
      try {
        EditorCell editorCell = super.createChildCell(child);
        editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(myOwnerNode, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf30e4L, "IncreasingInterval"), child));
        editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(myOwnerNode, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf30e4L, "IncreasingInterval"), child));
        installCellInfo(child, editorCell);
        return editorCell;
      } finally {
        myEditorContext.getCellFactory().popCellContext();
      }
    }

    protected boolean isCompatibilityMode() {
      return false;
    }

    private void installCellInfo(SNode child, EditorCell editorCell) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(editorCell, myOwnerNode, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf30e4L, "IncreasingInterval"), child), new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext)));
      }
      if (editorCell.getRole() == null) {
        editorCell.setRole("IncreasingInterval");
      }
      Style style = new StyleImpl();
      SNode node = myOwnerNode;
      EditorContext editorContext = myEditorContext;
      style.set(StyleAttributes.DRAW_BORDER, 0, true);
      style.set(StyleAttributes.HORIZONTAL_ALIGN, 0, CellAlign.LEFT);
      editorCell.getStyle().putAll(style);
    }
    @Override
    protected EditorCell createEmptyCell() {
      myEditorContext.getCellFactory().pushCellContext();
      myEditorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(myOwnerNode, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf30e4L, "IncreasingInterval")));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_IncreasingInterval");
        installCellInfo(null, editorCell);
        return editorCell;
      } finally {
        myEditorContext.getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no IncreasingInterval>";
    }
  }
  private EditorCell createConstant_x41spq_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_x41spq_b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_x41spq_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_x41spq_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_x41spq_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_x41spq_d0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_x41spq_e0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_x41spq_e0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_x41spq_f0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new CoolingBehaviorRow_Editor.DecreasingIntervalSingleRoleHandler_x41spq_f0(node, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf30e6L, "DecreasingInterval"), editorContext);
    return provider.createCell();
  }
  private class DecreasingIntervalSingleRoleHandler_x41spq_f0 extends SingleRoleCellProvider {
    public DecreasingIntervalSingleRoleHandler_x41spq_f0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      myEditorContext.getCellFactory().pushCellContext();
      myEditorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromNode(child));
      try {
        EditorCell editorCell = super.createChildCell(child);
        editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(myOwnerNode, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf30e6L, "DecreasingInterval"), child));
        editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(myOwnerNode, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf30e6L, "DecreasingInterval"), child));
        installCellInfo(child, editorCell);
        return editorCell;
      } finally {
        myEditorContext.getCellFactory().popCellContext();
      }
    }

    protected boolean isCompatibilityMode() {
      return false;
    }

    private void installCellInfo(SNode child, EditorCell editorCell) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(editorCell, myOwnerNode, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf30e6L, "DecreasingInterval"), child), new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext)));
      }
      if (editorCell.getRole() == null) {
        editorCell.setRole("DecreasingInterval");
      }
      Style style = new StyleImpl();
      SNode node = myOwnerNode;
      EditorContext editorContext = myEditorContext;
      style.set(StyleAttributes.DRAW_BORDER, 0, true);
      style.set(StyleAttributes.HORIZONTAL_ALIGN, 0, CellAlign.CENTER);
      editorCell.getStyle().putAll(style);
    }
    @Override
    protected EditorCell createEmptyCell() {
      myEditorContext.getCellFactory().pushCellContext();
      myEditorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(myOwnerNode, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf30e6L, "DecreasingInterval")));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_DecreasingInterval");
        installCellInfo(null, editorCell);
        return editorCell;
      } finally {
        myEditorContext.getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no DecreasingInterval>";
    }
  }
  private EditorCell createConstant_x41spq_g0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_x41spq_g0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_x41spq_h0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_x41spq_h0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_x41spq_i0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_x41spq_i0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_x41spq_j0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new CoolingBehaviorRow_Editor.MWPValueSingleRoleHandler_x41spq_j0(node, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf3500L, "MWPValue"), editorContext);
    return provider.createCell();
  }
  private class MWPValueSingleRoleHandler_x41spq_j0 extends SingleRoleCellProvider {
    public MWPValueSingleRoleHandler_x41spq_j0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      myEditorContext.getCellFactory().pushCellContext();
      myEditorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromNode(child));
      try {
        EditorCell editorCell = super.createChildCell(child);
        editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteSmart(myOwnerNode, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf3500L, "MWPValue"), child));
        editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteSmart(myOwnerNode, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf3500L, "MWPValue"), child));
        installCellInfo(child, editorCell);
        return editorCell;
      } finally {
        myEditorContext.getCellFactory().popCellContext();
      }
    }

    protected boolean isCompatibilityMode() {
      return false;
    }

    private void installCellInfo(SNode child, EditorCell editorCell) {
      if (editorCell.getSubstituteInfo() == null || editorCell.getSubstituteInfo() instanceof DefaultSubstituteInfo) {
        editorCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(editorCell, myOwnerNode, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf3500L, "MWPValue"), child), new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext)));
      }
      if (editorCell.getRole() == null) {
        editorCell.setRole("MWPValue");
      }
      Style style = new StyleImpl();
      SNode node = myOwnerNode;
      EditorContext editorContext = myEditorContext;
      style.set(StyleAttributes.DRAW_BORDER, 0, true);
      style.set(StyleAttributes.HORIZONTAL_ALIGN, 0, CellAlign.RIGHT);
      editorCell.getStyle().putAll(style);
    }
    @Override
    protected EditorCell createEmptyCell() {
      myEditorContext.getCellFactory().pushCellContext();
      myEditorContext.getCellFactory().setNodeLocation(new SNodeLocation.FromParentAndLink(myOwnerNode, MetaAdapterFactory.getContainmentLink(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785cecf62L, 0x671fcf1785cf3500L, "MWPValue")));
      try {
        EditorCell editorCell = super.createEmptyCell();
        editorCell.setCellId("empty_MWPValue");
        installCellInfo(null, editorCell);
        return editorCell;
      } finally {
        myEditorContext.getCellFactory().popCellContext();
      }
    }
    protected String getNoTargetText() {
      return "<no MWPValue>";
    }
  }
}
