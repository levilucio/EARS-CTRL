package org.iets3.table.coolingbehaviortable.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.List;
import java.util.ArrayList;

public class DecreasingValue_Constraints extends BaseConstraintsDescriptor {
  public DecreasingValue_Constraints() {
    super(MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"));
  }

  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697dL, "To"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697dL), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "To";
        {

          // get smallest value 
          int smallestval = SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697dL, "To"));
          int size = ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).count();
          List<Integer> from_lst = ListSequence.fromList(new ArrayList<Integer>());
          List<Integer> to_lst = ListSequence.fromList(new ArrayList<Integer>());


          for (int itr = 0; itr < size; itr++) {
            if (smallestval > SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).getElement(itr), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697dL, "To"))) {
              smallestval = SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).getElement(itr), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697dL, "To"));
            }
            // get all the to values in increasing 
            ListSequence.fromList(to_lst).addElement(SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).getElement(itr), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697dL, "To")));
            ListSequence.fromList(from_lst).addElement(SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).getElement(itr), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697fL, "From")));

          }
          // check for duplicate 
          //  this check should be for all the To values in the decreasing intervals 
          int index = 0;
          for (int itr_ = 0; itr_ < size; itr_++) {
            if ((SPropertyOperations.getInteger(propertyValue)) == SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).getElement(itr_), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697dL, "To"))) {
              index++;
            }
            // if value is greater than 1 meaning duplicates in the To column 
            if (index > 1) {
              return false;
            }
          }

          //  check for the smallestval  
          if ((SPropertyOperations.getInteger(propertyValue)) == smallestval) {
            // min max value 
            if (smallestval > SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, "org.iets3.table.coolingbehaviortable.structure.DecreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, 0x7f5c34ec2da21a49L, "Max")) || smallestval < SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, "org.iets3.table.coolingbehaviortable.structure.DecreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, 0x7f5c34ec2da21a47L, "Min"))) {
              return false;
            }

          }

          if ((SPropertyOperations.getInteger(propertyValue)) != smallestval && (boolean) ListSequence.fromList(from_lst).contains((SPropertyOperations.getInteger(propertyValue))) == true) {
            // min max value for all the values that are greater then smallest 
            if ((SPropertyOperations.getInteger(propertyValue)) > SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, "org.iets3.table.coolingbehaviortable.structure.DecreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, 0x7f5c34ec2da21a49L, "Max")) || (SPropertyOperations.getInteger(propertyValue)) <= SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, "org.iets3.table.coolingbehaviortable.structure.DecreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, 0x7f5c34ec2da21a47L, "Min"))) {
              return false;
            }


          }
          return true;
        }
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697fL, "From"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697fL), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "From";
        {

          if (ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).count() == 1) {
            System.out.println("I am here because there is only one decreasing row that needs to be checked");
            // since there is only one row I just have to check for the min max 

            if ((SPropertyOperations.getInteger(propertyValue)) <= SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, "org.iets3.table.coolingbehaviortable.structure.DecreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, 0x7f5c34ec2da21a49L, "Max")) && (SPropertyOperations.getInteger(propertyValue)) > SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, "org.iets3.table.coolingbehaviortable.structure.DecreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, 0x7f5c34ec2da21a47L, "Min")) && (SPropertyOperations.getInteger(propertyValue)) > SPropertyOperations.getInteger(node, MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697dL, "To"))) {
              return true;
            }

          }

          if ((SPropertyOperations.getInteger(propertyValue)) > SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, "org.iets3.table.coolingbehaviortable.structure.DecreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, 0x7f5c34ec2da21a49L, "Max")) || (SPropertyOperations.getInteger(propertyValue)) <= SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, "org.iets3.table.coolingbehaviortable.structure.DecreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a44L, 0x7f5c34ec2da21a47L, "Min")) || (SPropertyOperations.getInteger(propertyValue)) < SPropertyOperations.getInteger(node, MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697dL, "To"))) {
            return false;
          }

          List<Integer> to_ = ListSequence.fromList(new ArrayList<Integer>());
          //  check for highest value that needs to be excluded to contineuos 
          int highest = SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697fL, "From"));
          int frm_size = ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).count();
          for (int p = 0; p < frm_size; p++) {
            if (highest < SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).getElement(p), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697fL, "From"))) {
              highest = SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).getElement(p), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697fL, "From"));
            }
            ListSequence.fromList(to_).addElement(SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).getElement(p), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697dL, "To")));
          }
          // check for duplicates in the From column of the decreasing intervals part of the table 
          int index_ = 0;
          for (int itr_frm = 0; itr_frm < frm_size; itr_frm++) {
            if ((SPropertyOperations.getInteger(propertyValue)) == SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, "org.iets3.table.coolingbehaviortable.structure.DecreasingValue"), false, new SAbstractConcept[]{})).getElement(itr_frm), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f5L, 0x32ddd37c32f3697fL, "From"))) {
              index_++;
            }
            if (index_ > 1) {
              return false;
            }

          }
          // check the value for contineonity if the value is highest 
          if ((SPropertyOperations.getInteger(propertyValue)) != highest) {
            // check for duplicate 
            // check for contineous interval from the From column 
            if ((boolean) ListSequence.fromList(to_).contains((SPropertyOperations.getInteger(propertyValue))) == false) {
              return false;
            }
          }


          return true;
        }
      }
    });
    return properties;
  }
}
