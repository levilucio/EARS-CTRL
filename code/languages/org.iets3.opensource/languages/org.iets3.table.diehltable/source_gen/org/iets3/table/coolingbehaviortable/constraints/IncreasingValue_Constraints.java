package org.iets3.table.coolingbehaviortable.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.List;
import java.util.ArrayList;

public class IncreasingValue_Constraints extends BaseConstraintsDescriptor {
  public IncreasingValue_Constraints() {
    super(MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"));
  }

  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36984L, "From"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36984L), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "From";
        {
          // check for smallest 
          Integer smallest = SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36984L, "From"));
          List<Integer> from_lst = ListSequence.fromList(new ArrayList<Integer>());
          List<Integer> to_lst = ListSequence.fromList(new ArrayList<Integer>());
          int size = ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).count();

          // make arraylists to contain the From values 

          for (int i = 0; i < size; i++) {
            if (smallest > SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).getElement(i), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36984L, "From"))) {
              smallest = SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).getElement(i), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36984L, "From"));
            }
            // get all the to values in increasing 
            ListSequence.fromList(to_lst).addElement(SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).getElement(i), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36982L, "To")));
            ListSequence.fromList(from_lst).addElement(SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).getElement(i), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36984L, "From")));
          }

          //  formulate the From array to be checked  
          // remove smallest value from the From array and reformulate 
          ListSequence.fromList(from_lst).removeElement(smallest);
          // check fo duplicate 
          int index = 0;

          for (int j = 0; j < size; j++) {
            if ((SPropertyOperations.getInteger(propertyValue)) == SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).getElement(j), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36984L, "From"))) {
              index++;
            }
            if (index > 1) {
              return false;
            }
          }

          if ((SPropertyOperations.getInteger(propertyValue)) == smallest) {
            if (smallest < SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, "org.iets3.table.coolingbehaviortable.structure.IncreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, 0x7f5c34ec2da21a38L, "Min")) || smallest > SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, "org.iets3.table.coolingbehaviortable.structure.IncreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, 0x7f5c34ec2da21a3aL, "Max"))) {
              return false;
            }
          }

          if ((SPropertyOperations.getInteger(propertyValue)) != smallest && (boolean) ListSequence.fromList(to_lst).contains((SPropertyOperations.getInteger(propertyValue))) == true) {
            // check for min max 
            if ((SPropertyOperations.getInteger(propertyValue)) <= SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, "org.iets3.table.coolingbehaviortable.structure.IncreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, 0x7f5c34ec2da21a38L, "Min")) || (SPropertyOperations.getInteger(propertyValue)) > SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, "org.iets3.table.coolingbehaviortable.structure.IncreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, 0x7f5c34ec2da21a3aL, "Max"))) {
              return false;
            }
          }

          return true;
        }
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36982L, "To"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36982L), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "To";
        {

          if (ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).count() == 1) {
            System.out.println("I am here because there is only 1 TO value");
            // min max value 
            if ((SPropertyOperations.getInteger(propertyValue)) > SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, "org.iets3.table.coolingbehaviortable.structure.IncreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, 0x7f5c34ec2da21a38L, "Min")) && (SPropertyOperations.getInteger(propertyValue)) <= SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, "org.iets3.table.coolingbehaviortable.structure.IncreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, 0x7f5c34ec2da21a3aL, "Max")) && (SPropertyOperations.getInteger(propertyValue)) > SPropertyOperations.getInteger(node, MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36984L, "From"))) {
              return true;
            }

          }
          // min max value 
          if ((SPropertyOperations.getInteger(propertyValue)) <= SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, "org.iets3.table.coolingbehaviortable.structure.IncreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, 0x7f5c34ec2da21a38L, "Min")) || (SPropertyOperations.getInteger(propertyValue)) > SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, "org.iets3.table.coolingbehaviortable.structure.IncreasingThreshold"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x7f5c34ec2da21a35L, 0x7f5c34ec2da21a3aL, "Max")) || (SPropertyOperations.getInteger(propertyValue)) <= SPropertyOperations.getInteger(node, MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36984L, "From"))) {
            return false;
          }

          List<Integer> from_ = ListSequence.fromList(new ArrayList<Integer>());
          // check for highest values 
          int highestval = SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).first(), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36982L, "To"));
          int size_ = ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).count();
          for (int y = 0; y < size_; y++) {
            if (highestval < SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).getElement(y), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36982L, "To"))) {
              highestval = SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).getElement(y), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36982L, "To"));
            }
            ListSequence.fromList(from_).addElement(SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).getElement(y), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36984L, "From")));
          }

          // duplicate values 
          int tosize = ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).count();
          int indx = 0;
          for (int p = 0; p < tosize; p++) {
            if ((SPropertyOperations.getInteger(propertyValue)) == SPropertyOperations.getInteger(ListSequence.fromList(SNodeOperations.getNodeDescendants(SNodeOperations.getContainingRoot(node), MetaAdapterFactory.getConcept(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, "org.iets3.table.coolingbehaviortable.structure.IncreasingValue"), false, new SAbstractConcept[]{})).getElement(p), MetaAdapterFactory.getProperty(0xf0094c7d7df04fa9L, 0x9be74ba73a8db962L, 0x671fcf1785ced8f2L, 0x32ddd37c32f36982L, "To"))) {
              indx++;
            }
            if (indx > 1) {
              return false;
            }

          }
          if ((SPropertyOperations.getInteger(propertyValue)) != highestval) {
            // check for contineuos values 
            if ((boolean) ListSequence.fromList(from_).contains((SPropertyOperations.getInteger(propertyValue))) == false) {
              return false;
            }
          }
          return true;
        }
      }
    });
    return properties;
  }
}
