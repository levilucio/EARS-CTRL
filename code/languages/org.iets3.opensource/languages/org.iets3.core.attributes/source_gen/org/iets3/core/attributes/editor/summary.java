package org.iets3.core.attributes.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import java.util.Collections;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.iets3.core.attributes.behavior.IAttribute__BehaviorDescriptor;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import com.mbeddr.mpsutil.editor.querylist.runtime.QueryListContext;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.mbeddr.mpsutil.editor.querylist.runtime.EditorCell_QueryList;
import com.mbeddr.mpsutil.editor.querylist.runtime.QueryListHandler;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandlerElementKeyMap;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.openapi.editor.cells.SubstituteInfo;
import com.mbeddr.mpsutil.editor.querylist.runtime.SubstituteInfoFactory;
import jetbrains.mps.nodeEditor.InlineCellProvider;
import de.itemis.mps.tooltips.runtime.LazyTooltip;
import de.itemis.mps.tooltips.runtime.TooltipId;
import de.itemis.mps.tooltips.runtime.TooltipAnchorWrapper;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.util.EqualUtil;
import jetbrains.mps.editor.runtime.cells.EmptyCellAction;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import java.awt.Color;
import jetbrains.mps.util.Computable;

public class summary implements ConceptEditorComponent {
  @NotNull
  public Collection<String> getContextHints() {
    return Collections.emptyList();
  }
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_k5k6oj_a(editorContext, node);
  }
  private EditorCell createCollection_k5k6oj_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_k5k6oj_a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    if (renderingCondition_k5k6oj_a0a(node, editorContext)) {
      editorCell.addEditorCell(this.createCollection_k5k6oj_a0(editorContext, node));
    }
    return editorCell;
  }
  private EditorCell createCollection_k5k6oj_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_k5k6oj_a0");
    editorCell.addEditorCell(this.createConstant_k5k6oj_a0a(editorContext, node));
    editorCell.addEditorCell(this.createQueryList_k5k6oj_b0a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_k5k6oj_c0a(editorContext, node));
    return editorCell;
  }
  private static boolean renderingCondition_k5k6oj_a0a(SNode node, EditorContext editorContext) {
    return ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x583939beded04735L, 0xa055a74f8477fc34L, 0x3ce7d48974432ecdL, 0x3ce7d48974432eceL, "attributes"))).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return IAttribute__BehaviorDescriptor.summaryString_id4A8SzOVam5y.invoke(it) != null;
      }
    });
  }
  private EditorCell createConstant_k5k6oj_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "[");
    editorCell.setCellId("Constant_k5k6oj_a0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createQueryList_k5k6oj_b0a(final EditorContext editorContext, final SNode node) {

    return QueryListContext.computeWithContext(new QueryListContext(node), new _FunctionTypes._return_P0_E0<EditorCell_QueryList>() {
      public EditorCell_QueryList invoke() {
        QueryListHandler handler = new summary.QueryListHandler_k5k6oj_b0a(editorContext, node);

        EditorCell_QueryList editorCell = handler.createCells(editorContext, new CellLayout_Horizontal());
        editorCell.setCellId("QueryList_k5k6oj_b0a");
        Style style = new StyleImpl();
        style.set(StyleAttributes.READ_ONLY, 0, true);
        editorCell.getStyle().putAll(style);
        return editorCell;
      }
    });

  }
  private static class QueryListHandler_k5k6oj_b0a extends QueryListHandler {
    public QueryListHandler_k5k6oj_b0a(EditorContext context, SNode ownerNode) {
      super(context, ownerNode);
    }
    public EditorCell createNodeCell(EditorContext editorContext, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(editorContext, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, editorContext);
      return elementCell;
    }
    @Override
    public EditorCell createEmptyCell(EditorContext editorContext) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(editorContext);
      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);
      return postProcessEmptyCell(emptyCell);
    }
    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext editorContext) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        if (elementNode != null) {

          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));


          elementCell.addKeyMap(new RefNodeListHandlerElementKeyMap(this, ","));
        }
        if (elementCell.getSubstituteInfo() == null) {
          elementCell.setSubstituteInfo(getSubstituteInfo(elementNode));
        }
      }
    }
    @Override
    public EditorCell createSeparatorCell(EditorContext editorContext, SNode prevNode, SNode nextNode) {
      EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, this.getOwner(), ",");
      editorCell.setSelectable(false);
      Style style = new StyleImpl();
      style.set(StyleAttributes.LAYOUT_CONSTRAINT, "");
      style.set(StyleAttributes.PUNCTUATION_LEFT, true);
      editorCell.getStyle().putAll(style);
      editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(prevNode));
      editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(prevNode));
      return editorCell;
    }
    private Object executeQuery(final SNode node, final EditorContext editorContext) {
      return ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x583939beded04735L, 0xa055a74f8477fc34L, 0x3ce7d48974432ecdL, 0x3ce7d48974432eceL, "attributes"))).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return IAttribute__BehaviorDescriptor.summaryString_id4A8SzOVam5y.invoke(it) != null;
        }
      });
    }
    @Override
    public Iterable<? extends SNode> getNodesForList(final SNode node) {
      Object queryResult = executeQuery(node, getEditorContext());
      if (queryResult instanceof Iterable) {
        return (Iterable<? extends SNode>) queryResult;
      } else {
        return Sequence.<SNode>singleton((SNode) queryResult);
      }
    }
    @Override
    public SubstituteInfo getSubstituteInfo(final SNode node, final SNode childNode, final SubstituteInfoFactory factory, final EditorContext editorContext) {
      return factory.forChild(childNode);
    }
    @Override
    public void insertNewNode(final SNode node, final SNode anchorNode, final boolean insertBefore) {
    }
    @Override
    public void deleteNode(final SNode node, final SNode nodeToDelete) {
    }
    @Override
    protected EditorCell createNodeCellNotNull(final EditorContext context, @NotNull final SNode node) {
      EditorCell cell;
      {
        final InlineCellProvider provider = new summary._Inline_k5k6oj_a1a0();
        provider.setSNode(node);
        provider.setRefNode(myOwnerNode);
        cell = createCellDuplicatesSafe(new _FunctionTypes._return_P0_E0<EditorCell>() {
          public EditorCell invoke() {
            return provider.createEditorCell(context);
          }
        });
      }
      return cell;
    }

    private jetbrains.mps.openapi.editor.cells.EditorCell_Collection wrapWithCollection(EditorCell cell) {
      jetbrains.mps.openapi.editor.cells.EditorCell_Collection collection = EditorCell_Collection.createIndent2(myEditorContext, myOwnerNode);
      collection.addEditorCell(cell);
      return collection;
    }

  }
  public static class _Inline_k5k6oj_a1a0 extends InlineCellProvider {
    public _Inline_k5k6oj_a1a0() {
      super();
    }
    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }
    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createTooltip_k5k6oj_a0b0a(editorContext, node);
    }
    private EditorCell createTooltip_k5k6oj_a0b0a(final EditorContext editorContext, final SNode node) {

      LazyTooltip tooltip = new LazyTooltip(editorContext, node, new TooltipId("tooltipId_a0b0a"), false) {
        @Override
        protected EditorCell buildTooltipCell() {
          return createQueryList_k5k6oj_a0a1a0(editorContext, node);
        }
      };
      EditorCell anchor = createReadOnlyModelAccessor_k5k6oj_a0a1a0(editorContext, node);

      TooltipAnchorWrapper editorCell = new TooltipAnchorWrapper(editorContext, node, anchor, tooltip);
      editorCell.setCellId("Tooltip_k5k6oj_a0b0a");
      return editorCell;
    }
    private EditorCell createReadOnlyModelAccessor_k5k6oj_a0a1a0(final EditorContext editorContext, final SNode node) {
      EditorCell_Property editorCell = EditorCell_Property.create(editorContext, new ModelAccessor() {
        public String getText() {
          return (String) IAttribute__BehaviorDescriptor.summaryString_id4A8SzOVam5y.invoke(node);
        }
        public void setText(String s) {
        }
        public boolean isValidText(String s) {
          return EqualUtil.equals(s, getText());
        }
      }, node);
      editorCell.setAction(CellActionType.DELETE, EmptyCellAction.getInstance());
      editorCell.setAction(CellActionType.BACKSPACE, EmptyCellAction.getInstance());
      editorCell.setCellId("ReadOnlyModelAccessor_k5k6oj_a0a1a0");
      Style style = new StyleImpl();
      style.set(StyleAttributes.NAVIGATABLE_NODE, 0, summary._Inline_k5k6oj_a1a0._StyleParameter_QueryFunction_k5k6oj_a0a0a1a0(editorContext, node));
      style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(summary._Inline_k5k6oj_a1a0._StyleParameter_QueryFunction_k5k6oj_a1a0a1a0(editorContext, node)));
      editorCell.getStyle().putAll(style);
      return editorCell;
    }
    private static SNode _StyleParameter_QueryFunction_k5k6oj_a0a0a1a0(EditorContext editorContext, SNode node) {
      return node;
    }
    private static Color _StyleParameter_QueryFunction_k5k6oj_a1a0a1a0(EditorContext editorContext, SNode node) {
      return (Color) IAttribute__BehaviorDescriptor.summaryColor_id4A8SzOVam5R.invoke(node);
    }
    private EditorCell createQueryList_k5k6oj_a0a1a0(final EditorContext editorContext, final SNode node) {

      return QueryListContext.computeWithContext(new QueryListContext(node), new _FunctionTypes._return_P0_E0<EditorCell_QueryList>() {
        public EditorCell_QueryList invoke() {
          QueryListHandler handler = new summary._Inline_k5k6oj_a1a0.QueryListHandler_k5k6oj_a0a1a0(editorContext, node);

          EditorCell_QueryList editorCell = handler.createCells(editorContext, new CellLayout_Horizontal());
          editorCell.setCellId("QueryList_k5k6oj_a0a1a0");
          Style style = new StyleImpl();
          style.set(StyleAttributes.READ_ONLY, 0, true);
          editorCell.getStyle().putAll(style);
          return editorCell;
        }
      });

    }
    private static class QueryListHandler_k5k6oj_a0a1a0 extends QueryListHandler {
      public QueryListHandler_k5k6oj_a0a1a0(EditorContext context, SNode ownerNode) {
        super(context, ownerNode);
      }
      public EditorCell createNodeCell(EditorContext editorContext, SNode elementNode) {
        EditorCell elementCell = super.createNodeCell(editorContext, elementNode);
        this.installElementCellActions(this.getOwner(), elementNode, elementCell, editorContext);
        return elementCell;
      }
      @Override
      public EditorCell createEmptyCell(EditorContext editorContext) {
        EditorCell emptyCell = null;
        emptyCell = super.createEmptyCell(editorContext);
        this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);
        return postProcessEmptyCell(emptyCell);
      }
      public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext editorContext) {
        if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
          elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
          if (elementNode != null) {

            elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode));


          }
          if (elementCell.getSubstituteInfo() == null) {
            elementCell.setSubstituteInfo(getSubstituteInfo(elementNode));
          }
        }
      }
      private Object executeQuery(final SNode node, final EditorContext editorContext) {
        return node;
      }
      @Override
      public Iterable<? extends SNode> getNodesForList(final SNode node) {
        Object queryResult = executeQuery(node, getEditorContext());
        if (queryResult instanceof Iterable) {
          return (Iterable<? extends SNode>) queryResult;
        } else {
          return Sequence.<SNode>singleton((SNode) queryResult);
        }
      }
      @Override
      public SubstituteInfo getSubstituteInfo(final SNode node, final SNode childNode, final SubstituteInfoFactory factory, final EditorContext editorContext) {
        return factory.forChild(childNode);
      }
      @Override
      public void insertNewNode(final SNode node, final SNode anchorNode, final boolean insertBefore) {
      }
      @Override
      public void deleteNode(final SNode node, final SNode nodeToDelete) {
      }
      @Override
      protected EditorCell createNodeCellNotNull(final EditorContext context, @NotNull final SNode node) {
        EditorCell cell;
        cell = createCellDuplicatesSafe(new _FunctionTypes._return_P0_E0<EditorCell>() {
          public EditorCell invoke() {
            return context.getEditorComponent().getUpdater().getCurrentUpdateSession().updateReferencedNodeCell(new Computable<EditorCell>() {
              public EditorCell compute() {
                return context.getEditorComponent().getUpdater().getCurrentUpdateSession().updateChildNodeCell(node);
              }
            }, node, "querylist5298733714215258350");
          }
        });
        return cell;
      }

      private jetbrains.mps.openapi.editor.cells.EditorCell_Collection wrapWithCollection(EditorCell cell) {
        jetbrains.mps.openapi.editor.cells.EditorCell_Collection collection = EditorCell_Collection.createIndent2(myEditorContext, myOwnerNode);
        collection.addEditorCell(cell);
        return collection;
      }

    }
  }
  private EditorCell createConstant_k5k6oj_c0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "]");
    editorCell.setCellId("Constant_k5k6oj_c0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
}
