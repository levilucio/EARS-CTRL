package org.iets3.flow.core.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SModelInternal;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SModelRepository;
import jetbrains.mps.project.AbstractModule;
import org.iets3.utility.behavior.LanguageUtility;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class FlowChunk__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xe8ac6d1264b24478L, 0xbf9a80cbf4ec8c16L, 0x4312b5445d47f8f3L, "org.iets3.flow.core.structure.FlowChunk");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<SLanguage> getLanguage_id18xeVvsIu3G = new SMethodBuilder<SLanguage>(new SJavaCompoundTypeImpl(SLanguage.class)).name("getLanguage").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("18xeVvsIu3G").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<Void> isAlreadyAdded_id18xeVvsJfYK = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("isAlreadyAdded").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("18xeVvsJfYK").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(SModelInternal.class, ""));
  public static final SMethod<Void> fixModuleImports_id5MdYwHWTJdG = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("fixModuleImports").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("5MdYwHWTJdG").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(SModule.class, ""));
  public static final SMethod<String> getPropertyModuleName_id4Q0YwXhVs52 = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getPropertyModuleName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4Q0YwXhVs52").registry(REGISTRY).build();
  public static final SMethod<SNode> findRootNodeByName_id1YsMefKpR77 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("findRootNodeByName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1YsMefKpR77").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(SModel.class, ""), SMethodBuilder.createJavaParameter(String.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getLanguage_id18xeVvsIu3G, isAlreadyAdded_id18xeVvsJfYK, fixModuleImports_id5MdYwHWTJdG, getPropertyModuleName_id4Q0YwXhVs52, findRootNodeByName_id1YsMefKpR77);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SLanguage getLanguage_id18xeVvsIu3G(@NotNull SNode __thisNode__, SNode conceptDeclaration) {


    for (SLanguage language : CollectionSequence.fromCollection(LanguageRegistry.getInstance().getAllLanguages())) {
      for (SAbstractConcept concept : Sequence.fromIterable(language.getConcepts())) {
        if (concept.getName().equals(SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
          SModel modelDescriptor = SModelRepository.getInstance().getModelDescriptor(language + ".structure");
          for (SNode atomicModel : Sequence.fromIterable(modelDescriptor.getRootNodes())) {
            if (atomicModel.getName().contains(SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {

              System.out.println("the atomic model id  is " + atomicModel.getNodeId().toString() + " and the concept declaration id is " + SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x5d2e6079771f8cc0L, "conceptId")));
              if (SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x5d2e6079771f8cc0L, "conceptId")).equals(atomicModel.getNodeId().toString())) {
                return language;
              }
            }
          }
        }
      }
    }

    System.out.println("+++++++++++++++++++++no language found for " + SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
    return null;
  }
  /*package*/ static void isAlreadyAdded_id18xeVvsJfYK(@NotNull SNode __thisNode__, SNode conceptDeclaration, SModelInternal internal) {

    try {
      SLanguage languageFromConcept = FlowChunk__BehaviorDescriptor.getLanguage_id18xeVvsIu3G.invoke(__thisNode__, conceptDeclaration);
      if (internal.importedLanguageIds().contains(languageFromConcept)) {
        System.out.println("already added for concept" + SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      } else {

        internal.addLanguage(languageFromConcept);
        System.out.println("not added for concept" + SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + " adding now!");
        internal.addModelImport(SModelRepository.getInstance().getModelDescriptor(languageFromConcept + ".structure").getReference());
      }

    } catch (Exception ex) {
      System.out.println("the exception is " + ex);
    }

  }
  /*package*/ static void fixModuleImports_id5MdYwHWTJdG(@NotNull SNode __thisNode__, SNode conceptDeclaration, SModule sModule) {
    if (isNotEmptyString(sModule.getModuleName())) {
      AbstractModule abstractModule = ((AbstractModule) sModule);
      SLanguage languageFromAbstractConcept = LanguageUtility.getLanguageFromAbstractConcept(conceptDeclaration);
      if (languageFromAbstractConcept.isValid()) {
        abstractModule.addDependency(languageFromAbstractConcept.getSourceModuleReference(), false);
      }

    }
  }
  /*package*/ static String getPropertyModuleName_id4Q0YwXhVs52(@NotNull SNode __thisNode__) {
    SNode firstFormulaConcept = ListSequence.fromList(SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0xe8ac6d1264b24478L, 0xbf9a80cbf4ec8c16L, 0x4312b5445d47f8f3L, 0x4312b5445d47f8f4L, "stateInstances"))).first(), MetaAdapterFactory.getContainmentLink(0xe8ac6d1264b24478L, 0xbf9a80cbf4ec8c16L, 0x4312b5445d47f8ebL, 0x4312b5445d48e926L, "propertyFormula")), MetaAdapterFactory.getConcept(0xc020a239d8654312L, 0xadc3cb4ab0a7a547L, 0x691240ff880dbb0aL, "org.iets3.flow.modelproperty.formulae.structure.AtomicProperty"), false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x24b2bf7ce180eb54L, 0x24b2bf7ce180eb55L, "conceptDeclaration")) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x24b2bf7ce180eb54L, 0x24b2bf7ce180eb55L, "conceptDeclaration"));
      }
    }).first();

    String moduleName = LanguageUtility.getLanguageFromAbstractConcept(firstFormulaConcept).getSourceModule().getModuleName();
    return moduleName;

  }
  /*package*/ static SNode findRootNodeByName_id1YsMefKpR77(@NotNull SNode __thisNode__, SModel behaviorModel, String nodeName) {
    for (SNode item : Sequence.fromIterable(behaviorModel.getRootNodes())) {
      if (item.getName().matches(nodeName)) {
        return item;
      }
    }
    return null;
  }

  /*package*/ FlowChunk__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SLanguage) getLanguage_id18xeVvsIu3G(node, (SNode) parameters[0]));
      case 1:
        isAlreadyAdded_id18xeVvsJfYK(node, (SNode) parameters[0], (SModelInternal) parameters[1]);
        return null;
      case 2:
        fixModuleImports_id5MdYwHWTJdG(node, (SNode) parameters[0], (SModule) parameters[1]);
        return null;
      case 3:
        return (T) ((String) getPropertyModuleName_id4Q0YwXhVs52(node));
      case 4:
        return (T) ((SNode) findRootNodeByName_id1YsMefKpR77(node, (SModel) parameters[0], (String) parameters[1]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
