package org.iets3.simulationOutputChecker.intentions;

/*Generated by MPS */

import jetbrains.mps.editor.intentions.IntentionsFactory;
import jetbrains.mps.editor.intentions.NodeTransformer;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.InputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IMapping;
import java.util.HashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.util.StringTokenizer;
import java.io.IOException;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.editor.intentions.BaseNodeTransformer;

public class PopulateTestResults extends IntentionsFactory {
  public PopulateTestResults() {
  }

  public String getId() {
    return getClass().getName();
  }

  public boolean isAvailableInChildren() {
    return true;
  }

  public boolean isSurroundWith() {
    return false;
  }

  public NodeTransformer.Kind getKind() {
    return NodeTransformer.Kind.INTENTION;
  }


  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, "org.iets3.simulationOutputChecker.structure.SimulinkResultDisplayer");
  }

  public SNodePointer getDeclarationNode() {
    return implementationNode;
  }

  private SNodePointer implementationNode = new SNodePointer("r:1faab47d-27f4-4bc1-9878-457bc3c9498f(org.iets3.simulationOutputChecker.intentions)", "8529349559162761385");


  private boolean isApplicableHelper(SNode node, EditorContext editorContext) {
    return true;
  }


  public boolean isAvailableInChild(SNode node, SNode node1, EditorContext context) {
    return true;
  }

  public boolean isApplicable(SNode node, EditorContext editorContext) {
    return isApplicableHelper(node, editorContext);
  }


  protected static Logger LOG = LogManager.getLogger(PopulateTestResults.class);
  public void execute(SNode node, EditorContext editorContext) {
    List<String> input = new ArrayList<String>();
    List<String> output = new ArrayList<String>();
    List<String> sequence = new ArrayList<String>();
    String dataType = "";

    List<String> inlist = ListSequence.fromList(new ArrayList<String>());
    List<String> outList = ListSequence.fromList(new ArrayList<String>());

    try {
      String line;

      final String testCaseFilePath = SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x22b33c261aecf1d1L, "filePath")) + "/testcaseResult.txt";
      final String stepByStepFilePath = SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x22b33c261aecf1d1L, "filePath")) + "/StepByStepResult.txt";


      InputStream fis = null;


      File file = new File(stepByStepFilePath);
      System.out.println("The value is " + stepByStepFilePath);
      File file2 = new File(testCaseFilePath);

      if (file.exists()) {
        fis = new FileInputStream(stepByStepFilePath);

      }
      if (file2.exists()) {
        fis = new FileInputStream(testCaseFilePath);

      }

      InputStreamReader isr = new InputStreamReader(fis);
      BufferedReader br = new BufferedReader(isr);

      while ((line = br.readLine()) != null) {

        if (line.trim().equalsIgnoreCase("INPUT:")) {
          dataType = "INPUT";
          continue;
        }

        if (line.trim().equalsIgnoreCase("OUTPUT:")) {
          //  

          SNode nodeGlossary = ListSequence.fromList(SModelOperations.nodes(SNodeOperations.getModel(node), MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, "org.iets3.ears.gxw.structure.GlossaryChunk"))).first();
          Map<SNode, String> triggerMap = MapSequence.fromMap(new LinkedHashMap<SNode, String>(16, (float) 0.75, false));
          for (SNode trigger : ListSequence.fromList(SLinkOperations.getChildren(nodeGlossary, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ff4L, "listOfTriggers")))) {
            MapSequence.fromMap(triggerMap).put(trigger, SPropertyOperations.getString(trigger, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger")).replace(" ", ""));
            MapSequence.fromMap(triggerMap).put(trigger, (SPropertyOperations.getString(SLinkOperations.getTarget(trigger, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x59e287abaa84d539L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + SPropertyOperations.getString(trigger, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger"))).replace(" ", ""));

          }
          for (String cell : input) {
            for (IMapping<SNode, String> item : MapSequence.fromMap(triggerMap)) {
              if (cell.contains(item.value())) {
                ListSequence.fromList(inlist).addElement(SLinkOperations.getTarget(item.key(), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x59e287abaa84d539L, "componentName")) + " " + SPropertyOperations.getString(item.key(), MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger")));
              }
            }
          }
          System.out.println("THe Outlist is " + inlist);
          //  

          dataType = "OUTPUT";
          continue;

        }

        if (line.trim().equalsIgnoreCase("START SEQUENCE")) {
          //  

          SNode nodeGlossary = ListSequence.fromList(SModelOperations.nodes(SNodeOperations.getModel(node), MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, "org.iets3.ears.gxw.structure.GlossaryChunk"))).first();
          Map<SNode, String> responseMap = MapSequence.fromMap(new HashMap<SNode, String>());
          for (SNode systemResponse : ListSequence.fromList(SLinkOperations.getChildren(nodeGlossary, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ffbL, "listOfResponses")))) {
            MapSequence.fromMap(responseMap).put(systemResponse, (SPropertyOperations.getString(SLinkOperations.getTarget(systemResponse, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + SPropertyOperations.getString(systemResponse, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711686L, "response"))).replace(" ", ""));
          }

          for (String cell : output) {
            for (IMapping<SNode, String> item : MapSequence.fromMap(responseMap)) {
              if (cell.contains(item.value())) {
                ListSequence.fromList(outList).addElement(SLinkOperations.getTarget(item.key(), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")) + " " + SPropertyOperations.getString(item.key(), MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711686L, "response")));
              }
            }
          }
          System.out.println("THe Outlist is " + outList);
          // / 

          SNode sequenceNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f92b8d3L, "org.iets3.simulink.resultmodel.structure.Sequence"));
          ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x60b8dfab159e013L, "simulinkResult")), MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3cL, 0x57a186429f923e44L, "sequence"))).addElement(sequenceNode);
          String dataReadLine;
          while ((dataReadLine = br.readLine()) != null) {
            boolean isEndOfSequence = dataReadLine.trim().equalsIgnoreCase("END SEQUENCE");
            if (isEndOfSequence) {
              break;
            }
            SNode result = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3dL, "org.iets3.simulink.resultmodel.structure.Result"));
            ListSequence.fromList(SLinkOperations.getChildren(sequenceNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f92b8d3L, 0x57a186429f92b8d6L, "results"))).addElement(result);
            if (dataReadLine.trim().equalsIgnoreCase("The inputs are:")) {
              String inputString = br.readLine().trim();
              SNode inputReadNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3eL, "org.iets3.simulink.resultmodel.structure.Input"));
              StringTokenizer tokenizer = new StringTokenizer(inputString.trim(), " ");
              while (tokenizer.hasMoreTokens()) {
                SNode inputCell = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e40L, "org.iets3.simulink.resultmodel.structure.InputCell"));
                String nextElement = (String) tokenizer.nextElement();
                SPropertyOperations.set(inputCell, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), ListSequence.fromList(inlist).getElement(SLinkOperations.getChildren(inputReadNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3eL, 0x57a186429f923e71L, "inputCell")).size()));
                SPropertyOperations.set(inputCell, MetaAdapterFactory.getProperty(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e40L, 0x57a186429f923e73L, "inputValue"), nextElement);
                SPropertyOperations.set(inputCell, MetaAdapterFactory.getProperty(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e40L, 0x57a186429f923e73L, "inputValue"), (nextElement.contentEquals("0") ? "Off" : "On "));

                ListSequence.fromList(SLinkOperations.getChildren(inputReadNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3eL, 0x57a186429f923e71L, "inputCell"))).addElement(inputCell);
              }
              SLinkOperations.setTarget(ListSequence.fromList(SLinkOperations.getChildren(sequenceNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f92b8d3L, 0x57a186429f92b8d6L, "results"))).last(), MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3dL, 0x57a186429f923e6aL, "input"), inputReadNode);
            }
            dataReadLine = br.readLine();
            if (dataReadLine.trim().equalsIgnoreCase("The outputs are:")) {
              String outputString = br.readLine().trim();
              SNode outputReadNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3fL, "org.iets3.simulink.resultmodel.structure.Output"));
              StringTokenizer tokenizer = new StringTokenizer(outputString.trim(), " ");
              int nameCounter = 0;
              while (tokenizer.hasMoreTokens()) {
                SNode outCell = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e41L, "org.iets3.simulink.resultmodel.structure.OutputCell"));
                SPropertyOperations.set(outCell, MetaAdapterFactory.getProperty(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e41L, 0x57a186429f923e77L, "outputValue"), (((String) tokenizer.nextElement()).contentEquals("0") ? "Off" : "On "));
                SPropertyOperations.set(outCell, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), ListSequence.fromList(outList).getElement(SLinkOperations.getChildren(outputReadNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3fL, 0x57a186429f923e75L, "outputCell")).size()));
                ListSequence.fromList(SLinkOperations.getChildren(outputReadNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3fL, 0x57a186429f923e75L, "outputCell"))).addElement(outCell);
              }
              SLinkOperations.setTarget(ListSequence.fromList(SLinkOperations.getChildren(sequenceNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f92b8d3L, 0x57a186429f92b8d6L, "results"))).last(), MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3dL, 0x57a186429f923e6cL, "output"), outputReadNode);
            }
          }
          dataType = "seqStart";
          continue;
        }

        if (dataType.equals("INPUT") && !(line.trim().equalsIgnoreCase("END INPUT:"))) {
          ListSequence.fromList(input).addElement(line);
          continue;

        }
        if (dataType.equals("OUTPUT") && !(line.trim().equalsIgnoreCase("END OUTPUT:"))) {
          ListSequence.fromList(output).addElement(line);
          continue;
        }
      }
      br.close();
    } catch (IOException e) {
      if (LOG.isInfoEnabled()) {
        LOG.info("the exception is ", e);
      }
    }

  }
  public String description(SNode node, EditorContext editorContext) {
    return "PopulateTestResults";
  }

  public Collection<NodeTransformer> getTreeTransformers(SNode node, SNode child, EditorContext editorContext) {
    Collection<NodeTransformer> result = CollectionSequence.fromCollection(new ArrayList<NodeTransformer>());
    CollectionSequence.fromCollection(result).addElement(new BaseNodeTransformer(this, node, editorContext, PopulateTestResults.this.getKind(), implementationNode) {
      protected void execute(SNode node, EditorContext editorContext) {
        PopulateTestResults.this.execute(node, editorContext);
      }
      protected String getDescription(SNode node, EditorContext editorContext) {
        return PopulateTestResults.this.description(node, editorContext);
      }
    });
    return result;
  }
}
