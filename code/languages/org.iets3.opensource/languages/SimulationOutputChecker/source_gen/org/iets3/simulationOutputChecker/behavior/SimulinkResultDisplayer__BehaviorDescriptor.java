package org.iets3.simulationOutputChecker.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import com.mathworks.engine.MatlabEngine;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IMapping;
import java.util.HashMap;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.io.InputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import java.util.StringTokenizer;
import java.io.IOException;
import javax.swing.JRadioButton;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class SimulinkResultDisplayer__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, "org.iets3.simulationOutputChecker.structure.SimulinkResultDisplayer");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<MatlabEngine> getMatLabReference_id45gtC4lp5Kn = new SMethodBuilder<MatlabEngine>(new SJavaCompoundTypeImpl(MatlabEngine.class)).name("getMatLabReference").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("45gtC4lp5Kn").registry(REGISTRY).build();
  public static final SMethod<Void> setMatLabReference_id45gtC4lpkqL = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setMatLabReference").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("45gtC4lpkqL").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MatlabEngine.class, ""));
  public static final SMethod<Void> setProperDisplayName_id1O7Kc2mNQm0 = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("setProperDisplayName").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1O7Kc2mNQm0").registry(REGISTRY).build();
  public static final SMethod<List<String>> convertInputNamestoGlossaryNames_id6LfPEEgAEsj = new SMethodBuilder<List<String>>(new SJavaCompoundTypeImpl((Class<List<String>>) ((Class) Object.class))).name("convertInputNamestoGlossaryNames").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6LfPEEgAEsj").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<List<String>>) ((Class) Object.class), ""));
  public static final SMethod<List<String>> convertOutNamestoGlossaryNames_id1XQPC7duh$L = new SMethodBuilder<List<String>>(new SJavaCompoundTypeImpl((Class<List<String>>) ((Class) Object.class))).name("convertOutNamestoGlossaryNames").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1XQPC7duh$L").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<List<String>>) ((Class) Object.class), ""));
  public static final SMethod<Void> parseSetSimulinkResult_id6s8kemLKVo_ = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("parseSetSimulinkResult").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6s8kemLKVo_").registry(REGISTRY).build();
  public static final SMethod<double[]> createInputArray_id7pulzJf6amK = new SMethodBuilder<double[]>(new SJavaCompoundTypeImpl(double[].class)).name("createInputArray").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("7pulzJf6amK").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(ArrayList.class, ""));
  public static final SMethod<Void> populateTracibilityList_id6XEZarpdKJA = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("populateTracibilityList").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6XEZarpdKJA").registry(REGISTRY).build();

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getMatLabReference_id45gtC4lp5Kn, setMatLabReference_id45gtC4lpkqL, setProperDisplayName_id1O7Kc2mNQm0, convertInputNamestoGlossaryNames_id6LfPEEgAEsj, convertOutNamestoGlossaryNames_id1XQPC7duh$L, parseSetSimulinkResult_id6s8kemLKVo_, createInputArray_id7pulzJf6amK, populateTracibilityList_id6XEZarpdKJA);

  private static void ___init___(@NotNull SNode __thisNode__) {
    final String[] options = {"-nojvm", "-nosplash", "-nodisplay"};

    final MatlabEngine startMatlab;
    try {
      startMatlab = MatlabEngine.startMatlab(options);
      startMatlab.evalAsync("load_system('simulinkModel')");
      SimulinkResultDisplayer__BehaviorDescriptor.setMatLabReference_id45gtC4lpkqL.invoke(__thisNode__, startMatlab);

      // setting traceability 
    } catch (Exception ex) {
      System.out.println("Exception" + ex.toString());
    }
  }

  /*package*/ static MatlabEngine getMatLabReference_id45gtC4lp5Kn(@NotNull SNode __thisNode__) {
    Object userObject = __thisNode__.getUserObject("SIMULINK_REF");
    if (userObject instanceof MatlabEngine) {
      return (MatlabEngine) userObject;

    } else {
      return null;
    }

  }
  /*package*/ static void setMatLabReference_id45gtC4lpkqL(@NotNull SNode __thisNode__, MatlabEngine matLabRef) {
    __thisNode__.putUserObject("SIMULINK_REF", matLabRef);
  }
  /*package*/ static void setProperDisplayName_id1O7Kc2mNQm0(@NotNull SNode __thisNode__) {

    SNode nodeGlossary = ListSequence.fromList(SModelOperations.nodes(SNodeOperations.getModel(__thisNode__), MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, "org.iets3.ears.gxw.structure.GlossaryChunk"))).first();
    Map<SNode, String> triggerMap = MapSequence.fromMap(new LinkedHashMap<SNode, String>(16, (float) 0.75, false));


    for (SNode trigger : ListSequence.fromList(SLinkOperations.getChildren(nodeGlossary, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ff4L, "listOfTriggers")))) {
      MapSequence.fromMap(triggerMap).put(trigger, SPropertyOperations.getString(trigger, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger")).replace(" ", ""));
      MapSequence.fromMap(triggerMap).put(trigger, (SPropertyOperations.getString(SLinkOperations.getTarget(trigger, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x59e287abaa84d539L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + SPropertyOperations.getString(trigger, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger"))).replace(" ", ""));

    }

    for (SNode cell : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x60b8dfab159e014L, "inputCells")))) {
      for (IMapping<SNode, String> item : MapSequence.fromMap(triggerMap)) {
        if (SPropertyOperations.getString(cell, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).contains(item.value())) {
          SPropertyOperations.set(cell, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SLinkOperations.getTarget(item.key(), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x59e287abaa84d539L, "componentName")) + " " + SPropertyOperations.getString(item.key(), MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger")));
        }
      }
    }
  }
  /*package*/ static List<String> convertInputNamestoGlossaryNames_id6LfPEEgAEsj(@NotNull SNode __thisNode__, List<String> inputList) {
    List<String> outList = new ArrayList<String>();

    SNode nodeGlossary = ListSequence.fromList(SModelOperations.nodes(SNodeOperations.getModel(__thisNode__), MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, "org.iets3.ears.gxw.structure.GlossaryChunk"))).first();
    Map<SNode, String> triggerMap = MapSequence.fromMap(new LinkedHashMap<SNode, String>(16, (float) 0.75, false));
    for (SNode trigger : ListSequence.fromList(SLinkOperations.getChildren(nodeGlossary, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ff4L, "listOfTriggers")))) {
      MapSequence.fromMap(triggerMap).put(trigger, SPropertyOperations.getString(trigger, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger")).replace(" ", ""));
      MapSequence.fromMap(triggerMap).put(trigger, (SPropertyOperations.getString(SLinkOperations.getTarget(trigger, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x59e287abaa84d539L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + SPropertyOperations.getString(trigger, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger"))).replace(" ", ""));

    }
    for (String cell : inputList) {
      for (IMapping<SNode, String> item : MapSequence.fromMap(triggerMap)) {
        if (cell.contains(item.value())) {
          ListSequence.fromList(outList).addElement(SLinkOperations.getTarget(item.key(), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x59e287abaa84d539L, "componentName")) + " " + SPropertyOperations.getString(item.key(), MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger")));
        }
      }
    }
    return outList;
  }
  /*package*/ static List<String> convertOutNamestoGlossaryNames_id1XQPC7duh$L(@NotNull SNode __thisNode__, List<String> outputList) {
    List<String> outList = new ArrayList<String>();

    SNode nodeGlossary = ListSequence.fromList(SModelOperations.nodes(SNodeOperations.getModel(__thisNode__), MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, "org.iets3.ears.gxw.structure.GlossaryChunk"))).first();
    Map<SNode, String> responseMap = MapSequence.fromMap(new HashMap<SNode, String>());
    for (SNode systemResponse : ListSequence.fromList(SLinkOperations.getChildren(nodeGlossary, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ffbL, "listOfResponses")))) {
      MapSequence.fromMap(responseMap).put(systemResponse, (SPropertyOperations.getString(SLinkOperations.getTarget(systemResponse, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + SPropertyOperations.getString(systemResponse, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711686L, "response"))).replace(" ", ""));
    }

    for (String cell : outList) {
      for (IMapping<SNode, String> item : MapSequence.fromMap(responseMap)) {
        if (cell.contains(item.value())) {
          ListSequence.fromList(outList).addElement(SLinkOperations.getTarget(item.key(), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")) + " " + SPropertyOperations.getString(item.key(), MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711686L, "response")));
        }
      }
    }
    return outList;
  }
  protected static Logger LOG = LogManager.getLogger(SimulinkResultDisplayer__BehaviorDescriptor.class);
  /*package*/ static void parseSetSimulinkResult_id6s8kemLKVo_(@NotNull SNode __thisNode__) {
    List<String> input = new ArrayList<String>();
    List<String> output = new ArrayList<String>();
    List<String> sequence = new ArrayList<String>();
    String dataType = "";

    List<String> inlist = ListSequence.fromList(new ArrayList<String>());
    List<String> outList = ListSequence.fromList(new ArrayList<String>());

    SimulinkResultDisplayer__BehaviorDescriptor.populateTracibilityList_id6XEZarpdKJA.invoke(__thisNode__);
    try {

      String line;

      final String testCaseFilePath = SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x22b33c261aecf1d1L, "filePath")) + "/testCaseResult.txt";
      final String stepByStepFilePath = SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x22b33c261aecf1d1L, "filePath")) + "/stepByStepResult.txt";

      InputStream fis = null;


      File file = new File(stepByStepFilePath);
      System.out.println("The value is " + stepByStepFilePath);
      File file2 = new File(testCaseFilePath);

      if (file.exists()) {
        fis = new FileInputStream(stepByStepFilePath);
      }
      if (file2.exists()) {
        fis = new FileInputStream(testCaseFilePath);

      }

      InputStreamReader isr = new InputStreamReader(fis);
      BufferedReader br = new BufferedReader(isr);

      while ((line = br.readLine()) != null) {

        if (line.trim().equalsIgnoreCase("INPUT:")) {
          dataType = "INPUT";
          continue;
        }

        if (line.trim().equalsIgnoreCase("OUTPUT:")) {
          //  

          SNode nodeGlossary = ListSequence.fromList(SModelOperations.nodes(SNodeOperations.getModel(__thisNode__), MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, "org.iets3.ears.gxw.structure.GlossaryChunk"))).first();
          Map<SNode, String> triggerMap = MapSequence.fromMap(new LinkedHashMap<SNode, String>(16, (float) 0.75, false));
          for (SNode trigger : ListSequence.fromList(SLinkOperations.getChildren(nodeGlossary, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ff4L, "listOfTriggers")))) {
            MapSequence.fromMap(triggerMap).put(trigger, SPropertyOperations.getString(trigger, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger")).replace(" ", ""));
            MapSequence.fromMap(triggerMap).put(trigger, (SPropertyOperations.getString(SLinkOperations.getTarget(trigger, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x59e287abaa84d539L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + SPropertyOperations.getString(trigger, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger"))).replace(" ", ""));

          }
          for (String cell : input) {
            for (IMapping<SNode, String> item : MapSequence.fromMap(triggerMap)) {
              if (cell.contains(item.value())) {
                ListSequence.fromList(inlist).addElement(SLinkOperations.getTarget(item.key(), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x59e287abaa84d539L, "componentName")) + " " + SPropertyOperations.getString(item.key(), MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger")));
              }
            }
          }
          //  

          dataType = "OUTPUT";
          continue;

        }

        if (line.trim().equalsIgnoreCase("START SEQUENCE")) {
          //  

          SNode nodeGlossary = ListSequence.fromList(SModelOperations.nodes(SNodeOperations.getModel(__thisNode__), MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, "org.iets3.ears.gxw.structure.GlossaryChunk"))).first();
          Map<SNode, String> responseMap = MapSequence.fromMap(new HashMap<SNode, String>());
          for (SNode systemResponse : ListSequence.fromList(SLinkOperations.getChildren(nodeGlossary, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ffbL, "listOfResponses")))) {
            MapSequence.fromMap(responseMap).put(systemResponse, (SPropertyOperations.getString(SLinkOperations.getTarget(systemResponse, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + SPropertyOperations.getString(systemResponse, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711686L, "response"))).replace(" ", ""));
          }

          for (String cell : output) {
            for (IMapping<SNode, String> item : MapSequence.fromMap(responseMap)) {
              if (cell.contains(item.value())) {
                ListSequence.fromList(outList).addElement(SLinkOperations.getTarget(item.key(), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")) + " " + SPropertyOperations.getString(item.key(), MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711686L, "response")));
              }
            }
          }
          // / 

          SNode sequenceNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f92b8d3L, "org.iets3.simulink.resultmodel.structure.Sequence"));
          ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x60b8dfab159e013L, "simulinkResult")), MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3cL, 0x57a186429f923e44L, "sequence"))).addElement(sequenceNode);
          String dataReadLine;
          while ((dataReadLine = br.readLine()) != null) {
            boolean isEndOfSequence = dataReadLine.trim().equalsIgnoreCase("END SEQUENCE");
            if (isEndOfSequence) {
              break;
            }
            SNode result = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3dL, "org.iets3.simulink.resultmodel.structure.Result"));
            ListSequence.fromList(SLinkOperations.getChildren(sequenceNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f92b8d3L, 0x57a186429f92b8d6L, "results"))).addElement(result);
            if (dataReadLine.trim().equalsIgnoreCase("The inputs are:")) {
              String inputString = br.readLine().trim();
              SNode inputReadNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3eL, "org.iets3.simulink.resultmodel.structure.Input"));
              StringTokenizer tokenizer = new StringTokenizer(inputString.trim(), " ");
              while (tokenizer.hasMoreTokens()) {
                SNode inputCell = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e40L, "org.iets3.simulink.resultmodel.structure.InputCell"));
                String nextElement = (String) tokenizer.nextElement();
                SPropertyOperations.set(inputCell, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), ListSequence.fromList(inlist).getElement(SLinkOperations.getChildren(inputReadNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3eL, 0x57a186429f923e71L, "inputCell")).size()));
                for (SNode item : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x6f6afca6d933ae6fL, "tracablityListInput")))) {
                  if (SPropertyOperations.getString(inputCell, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).contains(SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
                    SLinkOperations.setTarget(inputCell, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e40L, 0x2d5344d5b35b4363L, "listOfRef"), SNodeOperations.copyNode(item));
                  }
                }
                SPropertyOperations.set(inputCell, MetaAdapterFactory.getProperty(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e40L, 0x57a186429f923e73L, "inputValue"), nextElement);
                SPropertyOperations.set(inputCell, MetaAdapterFactory.getProperty(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e40L, 0x57a186429f923e73L, "inputValue"), (nextElement.contentEquals("0") ? "Off" : "On "));

                ListSequence.fromList(SLinkOperations.getChildren(inputReadNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3eL, 0x57a186429f923e71L, "inputCell"))).addElement(inputCell);
              }
              SLinkOperations.setTarget(ListSequence.fromList(SLinkOperations.getChildren(sequenceNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f92b8d3L, 0x57a186429f92b8d6L, "results"))).last(), MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3dL, 0x57a186429f923e6aL, "input"), inputReadNode);
            }
            dataReadLine = br.readLine();
            if (dataReadLine.trim().equalsIgnoreCase("The outputs are:")) {
              String outputString = br.readLine().trim();
              SNode outputReadNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3fL, "org.iets3.simulink.resultmodel.structure.Output"));
              StringTokenizer tokenizer = new StringTokenizer(outputString.trim(), " ");
              int nameCounter = 0;
              while (tokenizer.hasMoreTokens()) {
                SNode outCell = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e41L, "org.iets3.simulink.resultmodel.structure.OutputCell"));
                SPropertyOperations.set(outCell, MetaAdapterFactory.getProperty(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e41L, 0x57a186429f923e77L, "outputValue"), (((String) tokenizer.nextElement()).contentEquals("0") ? "Off" : "On "));
                SPropertyOperations.set(outCell, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), ListSequence.fromList(outList).getElement(SLinkOperations.getChildren(outputReadNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3fL, 0x57a186429f923e75L, "outputCell")).size()));
                for (SNode item : ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x340fca2e7b627f65L, "tracablityListOutput")))) {
                  if (SPropertyOperations.getString(outCell, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).contains(SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
                    SLinkOperations.setTarget(outCell, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e41L, 0x340fca2e7b4c4c9eL, "listOfRef"), SNodeOperations.copyNode(item));
                  }
                }

                ListSequence.fromList(SLinkOperations.getChildren(outputReadNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3fL, 0x57a186429f923e75L, "outputCell"))).addElement(outCell);
              }
              SLinkOperations.setTarget(ListSequence.fromList(SLinkOperations.getChildren(sequenceNode, MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f92b8d3L, 0x57a186429f92b8d6L, "results"))).last(), MetaAdapterFactory.getContainmentLink(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3dL, 0x57a186429f923e6cL, "output"), outputReadNode);
            }
          }
          dataType = "seqStart";
          continue;
        }

        if (dataType.equals("INPUT") && !(line.trim().equalsIgnoreCase("END INPUT:"))) {
          ListSequence.fromList(input).addElement(line);
          continue;

        }
        if (dataType.equals("OUTPUT") && !(line.trim().equalsIgnoreCase("END OUTPUT:"))) {
          ListSequence.fromList(output).addElement(line);
          continue;
        }
      }
      br.close();
    } catch (IOException e) {
      if (LOG.isInfoEnabled()) {
        LOG.info("the exception is ", e);
      }
    }

  }
  /*package*/ static double[] createInputArray_id7pulzJf6amK(@NotNull SNode __thisNode__, ArrayList<JRadioButton> arrayJRadioButtons) {
    double[] doubleArray = new double[arrayJRadioButtons.size()];
    int index = 0;
    for (JRadioButton item : ListSequence.fromList(arrayJRadioButtons)) {
      boolean selected = arrayJRadioButtons.get(index).isSelected();
      int myInt = ((selected) ? 1 : 0);
      doubleArray[index] = ((double) myInt);
      index++;
    }
    return doubleArray;
  }
  /*package*/ static void populateTracibilityList_id6XEZarpdKJA(@NotNull SNode __thisNode__) {


    SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x6f6afca6d933ae6fL, "tracablityListInput")).clear();
    SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x340fca2e7b627f65L, "tracablityListOutput")).clear();

    List<SNode> listOfTriggers = SLinkOperations.getChildren(ListSequence.fromList(SModelOperations.nodes(SNodeOperations.getModel(__thisNode__), MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, "org.iets3.ears.gxw.structure.GlossaryChunk"))).first(), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ff4L, "listOfTriggers"));
    List<SNode> listOfResponses = SLinkOperations.getChildren(ListSequence.fromList(SModelOperations.nodes(SNodeOperations.getModel(__thisNode__), MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, "org.iets3.ears.gxw.structure.GlossaryChunk"))).first(), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ffbL, "listOfResponses"));

    List<SNode> requirements = SLinkOperations.getChildren(ListSequence.fromList(SModelOperations.nodes(SNodeOperations.getModel(__thisNode__), MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, "org.iets3.ears.gxw.structure.RequirementChunk"))).first(), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, 0x5d97a5a8692b865cL, "requirements"));
    System.out.println(" there are " + listOfTriggers.size() + " ###### " + requirements.size());
    for (final SNode component : ListSequence.fromList(listOfTriggers)) {
      SNode traceList = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d93349feL, "org.iets3.simulationOutputChecker.structure.TraceablityList"));

      for (SNode item : ListSequence.fromList(requirements)) {
        if (ListSequence.fromList(SNodeOperations.getNodeDescendants(item, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x333c641fcaa9839fL, "org.iets3.ears.gxw.structure.AtomicFormulaTr"), false, new SAbstractConcept[]{})).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it1) {
            return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(it1, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x333c641fcaa9839fL, 0x333c641fcaa983b7L, "atom")), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x59e287abaa84d539L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).equalsIgnoreCase(SPropertyOperations.getString(SLinkOperations.getTarget(component, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x59e287abaa84d539L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
          }
        })) {

          if (!(ListSequence.fromList(SLinkOperations.getChildren(traceList, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d93349feL, 0x6f6afca6d93349ffL, "listOfTraces"))).any(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SPropertyOperations.getString(SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d9334a03L, 0x6f6afca6d933ae6dL, "referenceToRequirement")), MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d3L, 0x67517cee69ce1bb2L, "reqName")).equalsIgnoreCase(SPropertyOperations.getString(SLinkOperations.getTarget(component, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x59e287abaa84d539L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + " " + SPropertyOperations.getString(component, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger")));
            }
          }))) {
            SNode traceRef = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d9334a03L, "org.iets3.simulationOutputChecker.structure.TraceRef"));
            SLinkOperations.setTarget(traceRef, MetaAdapterFactory.getReferenceLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d9334a03L, 0x6f6afca6d933ae6dL, "referenceToRequirement"), item);
            ListSequence.fromList(SLinkOperations.getChildren(traceList, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d93349feL, 0x6f6afca6d93349ffL, "listOfTraces"))).addElement(SNodeOperations.copyNode(traceRef));

          }
        }
      }
      SPropertyOperations.set(traceList, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(SLinkOperations.getTarget(component, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x59e287abaa84d539L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + " " + SPropertyOperations.getString(component, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger")));
      ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x6f6afca6d933ae6fL, "tracablityListInput"))).addElement(SNodeOperations.copyNode(traceList));
    }

    for (final SNode response : ListSequence.fromList(listOfResponses)) {
      SNode traceList = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d93349feL, "org.iets3.simulationOutputChecker.structure.TraceablityList"));

      System.out.println("the response name is " + SPropertyOperations.getString(SLinkOperations.getTarget(response, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      for (final SNode item : ListSequence.fromList(requirements)) {

        System.out.println("res aliases are " + SNodeOperations.getNodeDescendants(item, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x7985bc66bcb081a8L, "org.iets3.ears.gxw.structure.AliasFormulaSR"), false, new SAbstractConcept[]{}).size() + "and the req name is " + SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d3L, 0x67517cee69ce1bb2L, "reqName")));
        if (ListSequence.fromList(SNodeOperations.getNodeDescendants(item, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cd2L, "org.iets3.ears.gxw.structure.AtomicFormulaSR"), false, new SAbstractConcept[]{})).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it1) {
            return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(it1, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cd2L, 0x5d97a5a869295cdcL, "atom")), MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).equalsIgnoreCase(SPropertyOperations.getString(SLinkOperations.getTarget(response, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
          }
        }) || ListSequence.fromList(SNodeOperations.getNodeDescendants(item, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x7985bc66bcb081a8L, "org.iets3.ears.gxw.structure.AliasFormulaSR"), false, new SAbstractConcept[]{})).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it1) {
            return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(it1, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x7985bc66bcb081a8L, 0x7985bc66bcb081a9L, "responseAlias")), MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x16773e7879d18484L, 0x7985bc66bcc45c05L, "aliasName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).contains(SPropertyOperations.getString(SLinkOperations.getTarget(response, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
          }
        })) {
          System.out.println("got response match");

          if (!(ListSequence.fromList(SLinkOperations.getChildren(traceList, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d93349feL, 0x6f6afca6d93349ffL, "listOfTraces"))).any(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SPropertyOperations.getString(SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d9334a03L, 0x6f6afca6d933ae6dL, "referenceToRequirement")), MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d3L, 0x67517cee69ce1bb2L, "reqName")).equalsIgnoreCase(SPropertyOperations.getString(item, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d3L, 0x67517cee69ce1bb2L, "reqName")));
            }
          }))) {
            System.out.println("adding trigger!");
            SNode traceRef = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d9334a03L, "org.iets3.simulationOutputChecker.structure.TraceRef"));
            SLinkOperations.setTarget(traceRef, MetaAdapterFactory.getReferenceLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d9334a03L, 0x6f6afca6d933ae6dL, "referenceToRequirement"), item);
            ListSequence.fromList(SLinkOperations.getChildren(traceList, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d93349feL, 0x6f6afca6d93349ffL, "listOfTraces"))).addElement(SNodeOperations.copyNode(traceRef));

          }
        }
      }
      SPropertyOperations.set(traceList, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(SLinkOperations.getTarget(response, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, MetaAdapterFactory.getContainmentLink(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L, 0x340fca2e7b627f65L, "tracablityListOutput"))).addElement(SNodeOperations.copyNode(traceList));
    }

  }

  /*package*/ SimulinkResultDisplayer__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((MatlabEngine) getMatLabReference_id45gtC4lp5Kn(node));
      case 1:
        setMatLabReference_id45gtC4lpkqL(node, (MatlabEngine) parameters[0]);
        return null;
      case 2:
        setProperDisplayName_id1O7Kc2mNQm0(node);
        return null;
      case 3:
        return (T) ((List<String>) convertInputNamestoGlossaryNames_id6LfPEEgAEsj(node, (List<String>) parameters[0]));
      case 4:
        return (T) ((List<String>) convertOutNamestoGlossaryNames_id1XQPC7duh$L(node, (List<String>) parameters[0]));
      case 5:
        parseSetSimulinkResult_id6s8kemLKVo_(node);
        return null;
      case 6:
        return (T) ((double[]) createInputArray_id7pulzJf6amK(node, (ArrayList<JRadioButton>) parameters[0]));
      case 7:
        populateTracibilityList_id6XEZarpdKJA(node);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
