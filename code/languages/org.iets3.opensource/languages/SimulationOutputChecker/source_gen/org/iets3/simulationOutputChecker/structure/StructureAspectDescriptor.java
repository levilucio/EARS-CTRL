package org.iets3.simulationOutputChecker.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(3);
  /*package*/ final ConceptDescriptor myConceptSimulinkResultDisplayer = createDescriptorForSimulinkResultDisplayer();
  /*package*/ final ConceptDescriptor myConceptTraceRef = createDescriptorForTraceRef();
  /*package*/ final ConceptDescriptor myConceptTraceablityList = createDescriptorForTraceablityList();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptSimulinkResultDisplayer.getId(), 0);
    myIndexMap.put(myConceptTraceRef.getId(), 1);
    myIndexMap.put(myConceptTraceablityList.getId(), 2);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptSimulinkResultDisplayer, myConceptTraceRef, myConceptTraceablityList);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptSimulinkResultDisplayer;
      case 1:
        return myConceptTraceRef;
      case 2:
        return myConceptTraceablityList;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForSimulinkResultDisplayer() {
    return new ConceptDescriptorBuilder("org.iets3.simulationOutputChecker.structure.SimulinkResultDisplayer", MetaIdFactory.conceptId(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x60b8dfab1590c57L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x22b33c261aecf1d1L, "filePath", new SNodePointer("r:e9507403-d0c6-4ae9-8f38-d17a1f3a0c92(org.iets3.simulationOutputChecker.structure)", "2500408352478917073")), new ConceptDescriptorBuilder.Prop(0x554bdfec9e00d4dL, "currentView", new SNodePointer("r:e9507403-d0c6-4ae9-8f38-d17a1f3a0c92(org.iets3.simulationOutputChecker.structure)", "384140770239581517"))).properties("filePath", "currentView").childDescriptors(new ConceptDescriptorBuilder.Link(0x60b8dfab159e013L, "simulinkResult", MetaIdFactory.conceptId(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e3cL), false, false, false, new SNodePointer("r:e9507403-d0c6-4ae9-8f38-d17a1f3a0c92(org.iets3.simulationOutputChecker.structure)", "435597896828182547")), new ConceptDescriptorBuilder.Link(0x60b8dfab159e014L, "inputCells", MetaIdFactory.conceptId(0xbe728f68d2954af5L, 0xa9aff280cb60ec85L, 0x57a186429f923e40L), true, true, false, new SNodePointer("r:e9507403-d0c6-4ae9-8f38-d17a1f3a0c92(org.iets3.simulationOutputChecker.structure)", "435597896828182548")), new ConceptDescriptorBuilder.Link(0x6f6afca6d933ae6fL, "tracablityListInput", MetaIdFactory.conceptId(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d93349feL), true, true, false, new SNodePointer("r:e9507403-d0c6-4ae9-8f38-d17a1f3a0c92(org.iets3.simulationOutputChecker.structure)", "8028507079280143983")), new ConceptDescriptorBuilder.Link(0x340fca2e7b627f65L, "tracablityListOutput", MetaIdFactory.conceptId(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d93349feL), true, true, false, new SNodePointer("r:e9507403-d0c6-4ae9-8f38-d17a1f3a0c92(org.iets3.simulationOutputChecker.structure)", "3751439315610271589"))).children(new String[]{"simulinkResult", "inputCells", "tracablityListInput", "tracablityListOutput"}, new boolean[]{false, true, true, true}).rootable().sourceNode(new SNodePointer("r:e9507403-d0c6-4ae9-8f38-d17a1f3a0c92(org.iets3.simulationOutputChecker.structure)", "435597896828128343")).create();
  }
  private static ConceptDescriptor createDescriptorForTraceRef() {
    return new ConceptDescriptorBuilder("org.iets3.simulationOutputChecker.structure.TraceRef", MetaIdFactory.conceptId(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d9334a03L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x6f6afca6d933ae6dL, "referenceToRequirement", MetaIdFactory.conceptId(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x6979ba361f3d77d3L), false, new SNodePointer("r:e9507403-d0c6-4ae9-8f38-d17a1f3a0c92(org.iets3.simulationOutputChecker.structure)", "8028507079280143981"))).references("referenceToRequirement").sourceNode(new SNodePointer("r:e9507403-d0c6-4ae9-8f38-d17a1f3a0c92(org.iets3.simulationOutputChecker.structure)", "8028507079280118275")).create();
  }
  private static ConceptDescriptor createDescriptorForTraceablityList() {
    return new ConceptDescriptorBuilder("org.iets3.simulationOutputChecker.structure.TraceablityList", MetaIdFactory.conceptId(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d93349feL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x6f6afca6d93349ffL, "listOfTraces", MetaIdFactory.conceptId(0x4796fa81351044f2L, 0x9810887e950aacc3L, 0x6f6afca6d9334a03L), true, true, false, new SNodePointer("r:e9507403-d0c6-4ae9-8f38-d17a1f3a0c92(org.iets3.simulationOutputChecker.structure)", "8028507079280118271"))).children(new String[]{"listOfTraces"}, new boolean[]{true}).sourceNode(new SNodePointer("r:e9507403-d0c6-4ae9-8f38-d17a1f3a0c92(org.iets3.simulationOutputChecker.structure)", "8028507079280118270")).create();
  }
}
