package org.iets3.flow.modelproperty.gxw.behavior;

/*Generated by MPS */

import jetbrains.mps.ide.modelchecker.platform.actions.SpecificChecker;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.ide.modelchecker.platform.actions.ModelCheckerIssue;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.ide.modelchecker.platform.actions.ModelChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class AllGlossaryTermsUsedClass extends SpecificChecker {
  @Override
  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel model, ProgressMonitor progressContext) {
    final List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());

    SNode nodeGlossaryChunk = ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, "org.iets3.ears.gxw.structure.GlossaryChunk"))).first();
    SNode nodeReqChunk = ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, "org.iets3.ears.gxw.structure.RequirementChunk"))).first();

    if ((nodeGlossaryChunk == null) || (nodeReqChunk == null)) {

      SpecificChecker.addIssue(results, ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x20fc30679cdcee4aL, "org.iets3.flow.dashboard.structure.DashboardHintDisplayer"))).first(), "There is no Glossary Chunk-Req Chunk pair to work with at present", ModelChecker.SEVERITY_ERROR, "FLOW language Custom Error", null);
    } else {
      for (final SNode trigger : ListSequence.fromList(SLinkOperations.getChildren(nodeGlossaryChunk, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ff4L, "listOfTriggers")))) {
        Iterable<SNode> seq = ListSequence.fromList(SNodeOperations.getNodeDescendants(nodeReqChunk, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x333c641fcaa9839fL, "org.iets3.ears.gxw.structure.AtomicFormulaTr"), false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x333c641fcaa9839fL, 0x333c641fcaa983b7L, "atom")) != null);
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x333c641fcaa9839fL, 0x333c641fcaa983b7L, "atom"));
          }
        });
        if (!(Sequence.fromIterable(seq).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger")).matches(SPropertyOperations.getString(trigger, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef655aL, 0x5d97a5a8692a5e10L, "trigger")));
          }
        }))) {
          SpecificChecker.addIssue(results, ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x20fc30679cdcee4aL, "org.iets3.flow.dashboard.structure.DashboardHintDisplayer"))).first(), "Unused Trigger found in requirements", ModelChecker.SEVERITY_ERROR, "FLOW language Custom Error", null);

        }
      }

      for (final SNode response : ListSequence.fromList(SLinkOperations.getChildren(nodeGlossaryChunk, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x1dfca649d8e7ff3L, 0x1dfca649d8e7ffbL, "listOfResponses")))) {
        Iterable<SNode> seq = ListSequence.fromList(SNodeOperations.getNodeDescendants(nodeReqChunk, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cd2L, "org.iets3.ears.gxw.structure.AtomicFormulaSR"), false, new SAbstractConcept[]{})).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return (SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cd2L, 0x5d97a5a869295cdcL, "atom")) != null);
          }
        }).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a869295cd2L, 0x5d97a5a869295cdcL, "atom"));
          }
        });

        if (!(Sequence.fromIterable(seq).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711686L, "response")).matches(SPropertyOperations.getString(response, MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711686L, "response"))) && SPropertyOperations.getString(SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")), MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x30664d6aaeddbda2L, 0x30664d6aaede4397L, "text")).matches(SPropertyOperations.getString(SLinkOperations.getTarget(response, MetaAdapterFactory.getReferenceLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0xe98cc5716ef6557L, 0x6c21f2425f711684L, "componentName")), MetaAdapterFactory.getProperty(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x30664d6aaeddbda2L, 0x30664d6aaede4397L, "text")));
          }
        }))) {

          SpecificChecker.addIssue(results, ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x20fc30679cdcee4aL, "org.iets3.flow.dashboard.structure.DashboardHintDisplayer"))).first(), "Unused response found in requirements", ModelChecker.SEVERITY_ERROR, "FLOW language Custom Error", null);

        }
      }

    }

    return results;
  }

}
