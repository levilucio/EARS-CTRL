package org.iets3.flow.modelproperty.gxw.behavior;

/*Generated by MPS */

import jetbrains.mps.ide.modelchecker.platform.actions.SpecificChecker;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.ide.modelchecker.platform.actions.ModelCheckerIssue;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.ide.modelchecker.platform.actions.ModelChecker;
import org.iets3.ears.gxw.behavior.RequirementChunk__BehaviorDescriptor;
import java.io.File;

public class RequirementRealizableClass extends SpecificChecker {

  @Override
  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel model, ProgressMonitor progressContext) {

    final List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());

    SNode nodeReqChunk = ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, "org.iets3.ears.gxw.structure.RequirementChunk"))).first();

    if ((nodeReqChunk == null) || ListSequence.fromList(SLinkOperations.getChildren(nodeReqChunk, MetaAdapterFactory.getContainmentLink(0x7731a166da1f472eL, 0xa40a2283f5e47dc5L, 0x5d97a5a8692b865bL, 0x5d97a5a8692b865cL, "requirements"))).isEmpty()) {
      SpecificChecker.addIssue(results, ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x20fc30679cdcee4aL, "org.iets3.flow.dashboard.structure.DashboardHintDisplayer"))).first(), "No Requirement is present yet to analyze", ModelChecker.SEVERITY_ERROR, "FLOW language Custom Error", null);

    } else {
      String textGenFileName = "Formulaes.txt";



      RequirementChunk__BehaviorDescriptor.ConvertReqToFormulae_id4MKUcPlT3vX.invoke(nodeReqChunk, textGenFileName);
      File textGenFile = new File(textGenFileName);
      if (textGenFile.exists()) {
        if (RequirementChunk__BehaviorDescriptor.GetSolverOutputString_id4MKUcPmjdeS.invoke(nodeReqChunk, new File(textGenFileName)).contains("Error:")) {
          SpecificChecker.addIssue(results, ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0x102111329b5e427aL, 0x9b371c1f28794a5eL, 0x20fc30679cdcee4aL, "org.iets3.flow.dashboard.structure.DashboardHintDisplayer"))).first(), "The requirements are not realizable", ModelChecker.SEVERITY_ERROR, "FLOW language Custom Error", null);

        }

      }


      System.out.println("++++++++++++++++++++++++++++++++");
      System.out.println(RequirementChunk__BehaviorDescriptor.GetSolverOutputString_id4MKUcPmjdeS.invoke(nodeReqChunk, new File(textGenFileName)));
      System.out.println("++++++++++++++++++++++++++++++++");


    }

    return results;

  }
}
