package org.iets3.flow.modelproperty.gxw.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(8);
  /*package*/ final ConceptDescriptor myConceptActuatorDefinedProperty = createDescriptorForActuatorDefinedProperty();
  /*package*/ final ConceptDescriptor myConceptAllGlossaryTermsUsed = createDescriptorForAllGlossaryTermsUsed();
  /*package*/ final ConceptDescriptor myConceptComponentDefinedProperty = createDescriptorForComponentDefinedProperty();
  /*package*/ final ConceptDescriptor myConceptGLossaryErrorFreeProperty = createDescriptorForGLossaryErrorFreeProperty();
  /*package*/ final ConceptDescriptor myConceptGLossaryisCreatedProperty = createDescriptorForGLossaryisCreatedProperty();
  /*package*/ final ConceptDescriptor myConceptModelProperty = createDescriptorForModelProperty();
  /*package*/ final ConceptDescriptor myConceptRequirementChunkPresentProperty = createDescriptorForRequirementChunkPresentProperty();
  /*package*/ final ConceptDescriptor myConceptRequirementRealizable = createDescriptorForRequirementRealizable();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptActuatorDefinedProperty.getId(), 0);
    myIndexMap.put(myConceptAllGlossaryTermsUsed.getId(), 1);
    myIndexMap.put(myConceptComponentDefinedProperty.getId(), 2);
    myIndexMap.put(myConceptGLossaryErrorFreeProperty.getId(), 3);
    myIndexMap.put(myConceptGLossaryisCreatedProperty.getId(), 4);
    myIndexMap.put(myConceptModelProperty.getId(), 5);
    myIndexMap.put(myConceptRequirementChunkPresentProperty.getId(), 6);
    myIndexMap.put(myConceptRequirementRealizable.getId(), 7);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptActuatorDefinedProperty, myConceptAllGlossaryTermsUsed, myConceptComponentDefinedProperty, myConceptGLossaryErrorFreeProperty, myConceptGLossaryisCreatedProperty, myConceptModelProperty, myConceptRequirementChunkPresentProperty, myConceptRequirementRealizable);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptActuatorDefinedProperty;
      case 1:
        return myConceptAllGlossaryTermsUsed;
      case 2:
        return myConceptComponentDefinedProperty;
      case 3:
        return myConceptGLossaryErrorFreeProperty;
      case 4:
        return myConceptGLossaryisCreatedProperty;
      case 5:
        return myConceptModelProperty;
      case 6:
        return myConceptRequirementChunkPresentProperty;
      case 7:
        return myConceptRequirementRealizable;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForActuatorDefinedProperty() {
    return new ConceptDescriptorBuilder("org.iets3.flow.modelproperty.gxw.structure.ActuatorDefinedProperty", MetaIdFactory.conceptId(0x3e3749e596c04132L, 0x8c4a7309a74f9fd6L, 0x5567236ee48b4382L)).super_("org.iets3.flow.modelproperty.structure.ModelProperty").version(1).super_(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).parents("org.iets3.flow.modelproperty.structure.ModelProperty").parentIds(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).sourceNode(new SNodePointer("r:afc3de6c-6429-4bb9-b26d-918b8ae8822c(org.iets3.flow.modelproperty.gxw.structure)", "6153926375012778882")).create();
  }
  private static ConceptDescriptor createDescriptorForAllGlossaryTermsUsed() {
    return new ConceptDescriptorBuilder("org.iets3.flow.modelproperty.gxw.structure.AllGlossaryTermsUsed", MetaIdFactory.conceptId(0x3e3749e596c04132L, 0x8c4a7309a74f9fd6L, 0x6477a78990a6aedL)).super_("org.iets3.flow.modelproperty.structure.ModelProperty").version(1).super_(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).parents("org.iets3.flow.modelproperty.structure.ModelProperty").parentIds(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).sourceNode(new SNodePointer("r:afc3de6c-6429-4bb9-b26d-918b8ae8822c(org.iets3.flow.modelproperty.gxw.structure)", "452464945956285165")).create();
  }
  private static ConceptDescriptor createDescriptorForComponentDefinedProperty() {
    return new ConceptDescriptorBuilder("org.iets3.flow.modelproperty.gxw.structure.ComponentDefinedProperty", MetaIdFactory.conceptId(0x3e3749e596c04132L, 0x8c4a7309a74f9fd6L, 0x5567236ee4693f1cL)).super_("org.iets3.flow.modelproperty.structure.ModelProperty").version(1).super_(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).parents("org.iets3.flow.modelproperty.structure.ModelProperty").parentIds(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).sourceNode(new SNodePointer("r:afc3de6c-6429-4bb9-b26d-918b8ae8822c(org.iets3.flow.modelproperty.gxw.structure)", "6153926375010549532")).create();
  }
  private static ConceptDescriptor createDescriptorForGLossaryErrorFreeProperty() {
    return new ConceptDescriptorBuilder("org.iets3.flow.modelproperty.gxw.structure.GLossaryErrorFreeProperty", MetaIdFactory.conceptId(0x3e3749e596c04132L, 0x8c4a7309a74f9fd6L, 0x5567236ee4631d3cL)).super_("org.iets3.flow.modelproperty.structure.ModelProperty").version(1).super_(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).parents("org.iets3.flow.modelproperty.structure.ModelProperty").parentIds(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).sourceNode(new SNodePointer("r:afc3de6c-6429-4bb9-b26d-918b8ae8822c(org.iets3.flow.modelproperty.gxw.structure)", "6153926375010147644")).create();
  }
  private static ConceptDescriptor createDescriptorForGLossaryisCreatedProperty() {
    return new ConceptDescriptorBuilder("org.iets3.flow.modelproperty.gxw.structure.GLossaryisCreatedProperty", MetaIdFactory.conceptId(0x3e3749e596c04132L, 0x8c4a7309a74f9fd6L, 0x5567236ee43f4b2fL)).super_("org.iets3.flow.modelproperty.structure.ModelProperty").version(1).super_(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).parents("org.iets3.flow.modelproperty.structure.ModelProperty").parentIds(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).sourceNode(new SNodePointer("r:afc3de6c-6429-4bb9-b26d-918b8ae8822c(org.iets3.flow.modelproperty.gxw.structure)", "6153926375007800111")).create();
  }
  private static ConceptDescriptor createDescriptorForModelProperty() {
    return new ConceptDescriptorBuilder("org.iets3.flow.modelproperty.gxw.structure.ModelProperty", MetaIdFactory.conceptId(0x3e3749e596c04132L, 0x8c4a7309a74f9fd6L, 0x56e0c2409a3be91bL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().sourceNode(new SNodePointer("r:afc3de6c-6429-4bb9-b26d-918b8ae8822c(org.iets3.flow.modelproperty.gxw.structure)", "6260217064766302491")).create();
  }
  private static ConceptDescriptor createDescriptorForRequirementChunkPresentProperty() {
    return new ConceptDescriptorBuilder("org.iets3.flow.modelproperty.gxw.structure.RequirementChunkPresentProperty", MetaIdFactory.conceptId(0x3e3749e596c04132L, 0x8c4a7309a74f9fd6L, 0x5567236ee467f31fL)).super_("org.iets3.flow.modelproperty.structure.ModelProperty").version(1).super_(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).parents("org.iets3.flow.modelproperty.structure.ModelProperty").parentIds(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).sourceNode(new SNodePointer("r:afc3de6c-6429-4bb9-b26d-918b8ae8822c(org.iets3.flow.modelproperty.gxw.structure)", "6153926375010464543")).create();
  }
  private static ConceptDescriptor createDescriptorForRequirementRealizable() {
    return new ConceptDescriptorBuilder("org.iets3.flow.modelproperty.gxw.structure.RequirementRealizable", MetaIdFactory.conceptId(0x3e3749e596c04132L, 0x8c4a7309a74f9fd6L, 0x4cb0e8cd55e29317L)).super_("org.iets3.flow.modelproperty.structure.ModelProperty").version(1).super_(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).parents("org.iets3.flow.modelproperty.structure.ModelProperty").parentIds(MetaIdFactory.conceptId(0xecea2a9218f4e3bL, 0xbadca524a5addb7cL, 0x56e0c2409a3be91bL)).sourceNode(new SNodePointer("r:afc3de6c-6429-4bb9-b26d-918b8ae8822c(org.iets3.flow.modelproperty.gxw.structure)", "5526172711390450455")).create();
  }
}
