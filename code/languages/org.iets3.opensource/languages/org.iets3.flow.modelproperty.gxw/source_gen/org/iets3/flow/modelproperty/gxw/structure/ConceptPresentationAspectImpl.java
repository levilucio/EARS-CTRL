package org.iets3.flow.modelproperty.gxw.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ActuatorDefinedProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AllGlossaryTermsUsed = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ComponentDefinedProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GLossaryErrorFreeProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GLossaryisCreatedProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequirementChunkPresentProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequirementRealizable = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_ActuatorDefinedProperty;
      case 1:
        return props_AllGlossaryTermsUsed;
      case 2:
        return props_ComponentDefinedProperty;
      case 3:
        return props_GLossaryErrorFreeProperty;
      case 4:
        return props_GLossaryisCreatedProperty;
      case 5:
        return props_ModelProperty;
      case 6:
        return props_RequirementChunkPresentProperty;
      case 7:
        return props_RequirementRealizable;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
